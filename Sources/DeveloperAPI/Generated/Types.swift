// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `POST /v1/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)`.
    func bundleIdCapabilitiesCreateInstance(_ input: Operations.BundleIdCapabilitiesCreateInstance.Input) async throws -> Operations.BundleIdCapabilitiesCreateInstance.Output
    /// - Remark: HTTP `PATCH /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)`.
    func bundleIdCapabilitiesUpdateInstance(_ input: Operations.BundleIdCapabilitiesUpdateInstance.Input) async throws -> Operations.BundleIdCapabilitiesUpdateInstance.Output
    /// - Remark: HTTP `DELETE /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)`.
    func bundleIdCapabilitiesDeleteInstance(_ input: Operations.BundleIdCapabilitiesDeleteInstance.Input) async throws -> Operations.BundleIdCapabilitiesDeleteInstance.Output
    /// - Remark: HTTP `GET /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)`.
    func bundleIdsGetCollection(_ input: Operations.BundleIdsGetCollection.Input) async throws -> Operations.BundleIdsGetCollection.Output
    /// - Remark: HTTP `POST /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)`.
    func bundleIdsCreateInstance(_ input: Operations.BundleIdsCreateInstance.Input) async throws -> Operations.BundleIdsCreateInstance.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)`.
    func bundleIdsGetInstance(_ input: Operations.BundleIdsGetInstance.Input) async throws -> Operations.BundleIdsGetInstance.Output
    /// - Remark: HTTP `PATCH /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)`.
    func bundleIdsUpdateInstance(_ input: Operations.BundleIdsUpdateInstance.Input) async throws -> Operations.BundleIdsUpdateInstance.Output
    /// - Remark: HTTP `DELETE /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)`.
    func bundleIdsDeleteInstance(_ input: Operations.BundleIdsDeleteInstance.Input) async throws -> Operations.BundleIdsDeleteInstance.Output
    /// - Remark: HTTP `GET /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)`.
    func certificatesGetCollection(_ input: Operations.CertificatesGetCollection.Input) async throws -> Operations.CertificatesGetCollection.Output
    /// - Remark: HTTP `POST /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)`.
    func certificatesCreateInstance(_ input: Operations.CertificatesCreateInstance.Input) async throws -> Operations.CertificatesCreateInstance.Output
    /// - Remark: HTTP `GET /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)`.
    func certificatesGetInstance(_ input: Operations.CertificatesGetInstance.Input) async throws -> Operations.CertificatesGetInstance.Output
    /// - Remark: HTTP `PATCH /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)`.
    func certificatesUpdateInstance(_ input: Operations.CertificatesUpdateInstance.Input) async throws -> Operations.CertificatesUpdateInstance.Output
    /// - Remark: HTTP `DELETE /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)`.
    func certificatesDeleteInstance(_ input: Operations.CertificatesDeleteInstance.Input) async throws -> Operations.CertificatesDeleteInstance.Output
    /// - Remark: HTTP `GET /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)`.
    func devicesGetCollection(_ input: Operations.DevicesGetCollection.Input) async throws -> Operations.DevicesGetCollection.Output
    /// - Remark: HTTP `POST /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)`.
    func devicesCreateInstance(_ input: Operations.DevicesCreateInstance.Input) async throws -> Operations.DevicesCreateInstance.Output
    /// - Remark: HTTP `GET /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)`.
    func devicesGetInstance(_ input: Operations.DevicesGetInstance.Input) async throws -> Operations.DevicesGetInstance.Output
    /// - Remark: HTTP `PATCH /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)`.
    func devicesUpdateInstance(_ input: Operations.DevicesUpdateInstance.Input) async throws -> Operations.DevicesUpdateInstance.Output
    /// - Remark: HTTP `GET /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)`.
    func profilesGetCollection(_ input: Operations.ProfilesGetCollection.Input) async throws -> Operations.ProfilesGetCollection.Output
    /// - Remark: HTTP `POST /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)`.
    func profilesCreateInstance(_ input: Operations.ProfilesCreateInstance.Input) async throws -> Operations.ProfilesCreateInstance.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)`.
    func profilesGetInstance(_ input: Operations.ProfilesGetInstance.Input) async throws -> Operations.ProfilesGetInstance.Output
    /// - Remark: HTTP `DELETE /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)`.
    func profilesDeleteInstance(_ input: Operations.ProfilesDeleteInstance.Input) async throws -> Operations.ProfilesDeleteInstance.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)`.
    func bundleIdsAppGetToOneRelationship(_ input: Operations.BundleIdsAppGetToOneRelationship.Input) async throws -> Operations.BundleIdsAppGetToOneRelationship.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)`.
    func bundleIdsAppGetToOneRelated(_ input: Operations.BundleIdsAppGetToOneRelated.Input) async throws -> Operations.BundleIdsAppGetToOneRelated.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)`.
    func bundleIdsBundleIdCapabilitiesGetToManyRelationship(_ input: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input) async throws -> Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)`.
    func bundleIdsBundleIdCapabilitiesGetToManyRelated(_ input: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input) async throws -> Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)`.
    func bundleIdsProfilesGetToManyRelationship(_ input: Operations.BundleIdsProfilesGetToManyRelationship.Input) async throws -> Operations.BundleIdsProfilesGetToManyRelationship.Output
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)`.
    func bundleIdsProfilesGetToManyRelated(_ input: Operations.BundleIdsProfilesGetToManyRelated.Input) async throws -> Operations.BundleIdsProfilesGetToManyRelated.Output
    /// - Remark: HTTP `GET /v1/certificates/{id}/relationships/passTypeId`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)`.
    func certificatesPassTypeIdGetToOneRelationship(_ input: Operations.CertificatesPassTypeIdGetToOneRelationship.Input) async throws -> Operations.CertificatesPassTypeIdGetToOneRelationship.Output
    /// - Remark: HTTP `GET /v1/certificates/{id}/passTypeId`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)`.
    func certificatesPassTypeIdGetToOneRelated(_ input: Operations.CertificatesPassTypeIdGetToOneRelated.Input) async throws -> Operations.CertificatesPassTypeIdGetToOneRelated.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)`.
    func profilesBundleIdGetToOneRelationship(_ input: Operations.ProfilesBundleIdGetToOneRelationship.Input) async throws -> Operations.ProfilesBundleIdGetToOneRelationship.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)`.
    func profilesBundleIdGetToOneRelated(_ input: Operations.ProfilesBundleIdGetToOneRelated.Input) async throws -> Operations.ProfilesBundleIdGetToOneRelated.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)`.
    func profilesCertificatesGetToManyRelationship(_ input: Operations.ProfilesCertificatesGetToManyRelationship.Input) async throws -> Operations.ProfilesCertificatesGetToManyRelationship.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)`.
    func profilesCertificatesGetToManyRelated(_ input: Operations.ProfilesCertificatesGetToManyRelated.Input) async throws -> Operations.ProfilesCertificatesGetToManyRelated.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)`.
    func profilesDevicesGetToManyRelationship(_ input: Operations.ProfilesDevicesGetToManyRelationship.Input) async throws -> Operations.ProfilesDevicesGetToManyRelationship.Output
    /// - Remark: HTTP `GET /v1/profiles/{id}/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)`.
    func profilesDevicesGetToManyRelated(_ input: Operations.ProfilesDevicesGetToManyRelated.Input) async throws -> Operations.ProfilesDevicesGetToManyRelated.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `POST /v1/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)`.
    public func bundleIdCapabilitiesCreateInstance(
        headers: Operations.BundleIdCapabilitiesCreateInstance.Input.Headers = .init(),
        body: Operations.BundleIdCapabilitiesCreateInstance.Input.Body
    ) async throws -> Operations.BundleIdCapabilitiesCreateInstance.Output {
        try await bundleIdCapabilitiesCreateInstance(Operations.BundleIdCapabilitiesCreateInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PATCH /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)`.
    public func bundleIdCapabilitiesUpdateInstance(
        path: Operations.BundleIdCapabilitiesUpdateInstance.Input.Path,
        headers: Operations.BundleIdCapabilitiesUpdateInstance.Input.Headers = .init(),
        body: Operations.BundleIdCapabilitiesUpdateInstance.Input.Body
    ) async throws -> Operations.BundleIdCapabilitiesUpdateInstance.Output {
        try await bundleIdCapabilitiesUpdateInstance(Operations.BundleIdCapabilitiesUpdateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)`.
    public func bundleIdCapabilitiesDeleteInstance(
        path: Operations.BundleIdCapabilitiesDeleteInstance.Input.Path,
        headers: Operations.BundleIdCapabilitiesDeleteInstance.Input.Headers = .init()
    ) async throws -> Operations.BundleIdCapabilitiesDeleteInstance.Output {
        try await bundleIdCapabilitiesDeleteInstance(Operations.BundleIdCapabilitiesDeleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)`.
    public func bundleIdsGetCollection(
        query: Operations.BundleIdsGetCollection.Input.Query = .init(),
        headers: Operations.BundleIdsGetCollection.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsGetCollection.Output {
        try await bundleIdsGetCollection(Operations.BundleIdsGetCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)`.
    public func bundleIdsCreateInstance(
        headers: Operations.BundleIdsCreateInstance.Input.Headers = .init(),
        body: Operations.BundleIdsCreateInstance.Input.Body
    ) async throws -> Operations.BundleIdsCreateInstance.Output {
        try await bundleIdsCreateInstance(Operations.BundleIdsCreateInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)`.
    public func bundleIdsGetInstance(
        path: Operations.BundleIdsGetInstance.Input.Path,
        query: Operations.BundleIdsGetInstance.Input.Query = .init(),
        headers: Operations.BundleIdsGetInstance.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsGetInstance.Output {
        try await bundleIdsGetInstance(Operations.BundleIdsGetInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)`.
    public func bundleIdsUpdateInstance(
        path: Operations.BundleIdsUpdateInstance.Input.Path,
        headers: Operations.BundleIdsUpdateInstance.Input.Headers = .init(),
        body: Operations.BundleIdsUpdateInstance.Input.Body
    ) async throws -> Operations.BundleIdsUpdateInstance.Output {
        try await bundleIdsUpdateInstance(Operations.BundleIdsUpdateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)`.
    public func bundleIdsDeleteInstance(
        path: Operations.BundleIdsDeleteInstance.Input.Path,
        headers: Operations.BundleIdsDeleteInstance.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsDeleteInstance.Output {
        try await bundleIdsDeleteInstance(Operations.BundleIdsDeleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)`.
    public func certificatesGetCollection(
        query: Operations.CertificatesGetCollection.Input.Query = .init(),
        headers: Operations.CertificatesGetCollection.Input.Headers = .init()
    ) async throws -> Operations.CertificatesGetCollection.Output {
        try await certificatesGetCollection(Operations.CertificatesGetCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)`.
    public func certificatesCreateInstance(
        headers: Operations.CertificatesCreateInstance.Input.Headers = .init(),
        body: Operations.CertificatesCreateInstance.Input.Body
    ) async throws -> Operations.CertificatesCreateInstance.Output {
        try await certificatesCreateInstance(Operations.CertificatesCreateInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)`.
    public func certificatesGetInstance(
        path: Operations.CertificatesGetInstance.Input.Path,
        query: Operations.CertificatesGetInstance.Input.Query = .init(),
        headers: Operations.CertificatesGetInstance.Input.Headers = .init()
    ) async throws -> Operations.CertificatesGetInstance.Output {
        try await certificatesGetInstance(Operations.CertificatesGetInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)`.
    public func certificatesUpdateInstance(
        path: Operations.CertificatesUpdateInstance.Input.Path,
        headers: Operations.CertificatesUpdateInstance.Input.Headers = .init(),
        body: Operations.CertificatesUpdateInstance.Input.Body
    ) async throws -> Operations.CertificatesUpdateInstance.Output {
        try await certificatesUpdateInstance(Operations.CertificatesUpdateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)`.
    public func certificatesDeleteInstance(
        path: Operations.CertificatesDeleteInstance.Input.Path,
        headers: Operations.CertificatesDeleteInstance.Input.Headers = .init()
    ) async throws -> Operations.CertificatesDeleteInstance.Output {
        try await certificatesDeleteInstance(Operations.CertificatesDeleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)`.
    public func devicesGetCollection(
        query: Operations.DevicesGetCollection.Input.Query = .init(),
        headers: Operations.DevicesGetCollection.Input.Headers = .init()
    ) async throws -> Operations.DevicesGetCollection.Output {
        try await devicesGetCollection(Operations.DevicesGetCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)`.
    public func devicesCreateInstance(
        headers: Operations.DevicesCreateInstance.Input.Headers = .init(),
        body: Operations.DevicesCreateInstance.Input.Body
    ) async throws -> Operations.DevicesCreateInstance.Output {
        try await devicesCreateInstance(Operations.DevicesCreateInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)`.
    public func devicesGetInstance(
        path: Operations.DevicesGetInstance.Input.Path,
        query: Operations.DevicesGetInstance.Input.Query = .init(),
        headers: Operations.DevicesGetInstance.Input.Headers = .init()
    ) async throws -> Operations.DevicesGetInstance.Output {
        try await devicesGetInstance(Operations.DevicesGetInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `PATCH /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)`.
    public func devicesUpdateInstance(
        path: Operations.DevicesUpdateInstance.Input.Path,
        headers: Operations.DevicesUpdateInstance.Input.Headers = .init(),
        body: Operations.DevicesUpdateInstance.Input.Body
    ) async throws -> Operations.DevicesUpdateInstance.Output {
        try await devicesUpdateInstance(Operations.DevicesUpdateInstance.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)`.
    public func profilesGetCollection(
        query: Operations.ProfilesGetCollection.Input.Query = .init(),
        headers: Operations.ProfilesGetCollection.Input.Headers = .init()
    ) async throws -> Operations.ProfilesGetCollection.Output {
        try await profilesGetCollection(Operations.ProfilesGetCollection.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)`.
    public func profilesCreateInstance(
        headers: Operations.ProfilesCreateInstance.Input.Headers = .init(),
        body: Operations.ProfilesCreateInstance.Input.Body
    ) async throws -> Operations.ProfilesCreateInstance.Output {
        try await profilesCreateInstance(Operations.ProfilesCreateInstance.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)`.
    public func profilesGetInstance(
        path: Operations.ProfilesGetInstance.Input.Path,
        query: Operations.ProfilesGetInstance.Input.Query = .init(),
        headers: Operations.ProfilesGetInstance.Input.Headers = .init()
    ) async throws -> Operations.ProfilesGetInstance.Output {
        try await profilesGetInstance(Operations.ProfilesGetInstance.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `DELETE /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)`.
    public func profilesDeleteInstance(
        path: Operations.ProfilesDeleteInstance.Input.Path,
        headers: Operations.ProfilesDeleteInstance.Input.Headers = .init()
    ) async throws -> Operations.ProfilesDeleteInstance.Output {
        try await profilesDeleteInstance(Operations.ProfilesDeleteInstance.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)`.
    public func bundleIdsAppGetToOneRelationship(
        path: Operations.BundleIdsAppGetToOneRelationship.Input.Path,
        headers: Operations.BundleIdsAppGetToOneRelationship.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsAppGetToOneRelationship.Output {
        try await bundleIdsAppGetToOneRelationship(Operations.BundleIdsAppGetToOneRelationship.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)`.
    public func bundleIdsAppGetToOneRelated(
        path: Operations.BundleIdsAppGetToOneRelated.Input.Path,
        query: Operations.BundleIdsAppGetToOneRelated.Input.Query = .init(),
        headers: Operations.BundleIdsAppGetToOneRelated.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsAppGetToOneRelated.Output {
        try await bundleIdsAppGetToOneRelated(Operations.BundleIdsAppGetToOneRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)`.
    public func bundleIdsBundleIdCapabilitiesGetToManyRelationship(
        path: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Path,
        query: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Query = .init(),
        headers: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output {
        try await bundleIdsBundleIdCapabilitiesGetToManyRelationship(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)`.
    public func bundleIdsBundleIdCapabilitiesGetToManyRelated(
        path: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Path,
        query: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Query = .init(),
        headers: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output {
        try await bundleIdsBundleIdCapabilitiesGetToManyRelated(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)`.
    public func bundleIdsProfilesGetToManyRelationship(
        path: Operations.BundleIdsProfilesGetToManyRelationship.Input.Path,
        query: Operations.BundleIdsProfilesGetToManyRelationship.Input.Query = .init(),
        headers: Operations.BundleIdsProfilesGetToManyRelationship.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsProfilesGetToManyRelationship.Output {
        try await bundleIdsProfilesGetToManyRelationship(Operations.BundleIdsProfilesGetToManyRelationship.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)`.
    public func bundleIdsProfilesGetToManyRelated(
        path: Operations.BundleIdsProfilesGetToManyRelated.Input.Path,
        query: Operations.BundleIdsProfilesGetToManyRelated.Input.Query = .init(),
        headers: Operations.BundleIdsProfilesGetToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.BundleIdsProfilesGetToManyRelated.Output {
        try await bundleIdsProfilesGetToManyRelated(Operations.BundleIdsProfilesGetToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}/relationships/passTypeId`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)`.
    public func certificatesPassTypeIdGetToOneRelationship(
        path: Operations.CertificatesPassTypeIdGetToOneRelationship.Input.Path,
        headers: Operations.CertificatesPassTypeIdGetToOneRelationship.Input.Headers = .init()
    ) async throws -> Operations.CertificatesPassTypeIdGetToOneRelationship.Output {
        try await certificatesPassTypeIdGetToOneRelationship(Operations.CertificatesPassTypeIdGetToOneRelationship.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}/passTypeId`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)`.
    public func certificatesPassTypeIdGetToOneRelated(
        path: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Path,
        query: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query = .init(),
        headers: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Headers = .init()
    ) async throws -> Operations.CertificatesPassTypeIdGetToOneRelated.Output {
        try await certificatesPassTypeIdGetToOneRelated(Operations.CertificatesPassTypeIdGetToOneRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)`.
    public func profilesBundleIdGetToOneRelationship(
        path: Operations.ProfilesBundleIdGetToOneRelationship.Input.Path,
        headers: Operations.ProfilesBundleIdGetToOneRelationship.Input.Headers = .init()
    ) async throws -> Operations.ProfilesBundleIdGetToOneRelationship.Output {
        try await profilesBundleIdGetToOneRelationship(Operations.ProfilesBundleIdGetToOneRelationship.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)`.
    public func profilesBundleIdGetToOneRelated(
        path: Operations.ProfilesBundleIdGetToOneRelated.Input.Path,
        query: Operations.ProfilesBundleIdGetToOneRelated.Input.Query = .init(),
        headers: Operations.ProfilesBundleIdGetToOneRelated.Input.Headers = .init()
    ) async throws -> Operations.ProfilesBundleIdGetToOneRelated.Output {
        try await profilesBundleIdGetToOneRelated(Operations.ProfilesBundleIdGetToOneRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)`.
    public func profilesCertificatesGetToManyRelationship(
        path: Operations.ProfilesCertificatesGetToManyRelationship.Input.Path,
        query: Operations.ProfilesCertificatesGetToManyRelationship.Input.Query = .init(),
        headers: Operations.ProfilesCertificatesGetToManyRelationship.Input.Headers = .init()
    ) async throws -> Operations.ProfilesCertificatesGetToManyRelationship.Output {
        try await profilesCertificatesGetToManyRelationship(Operations.ProfilesCertificatesGetToManyRelationship.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)`.
    public func profilesCertificatesGetToManyRelated(
        path: Operations.ProfilesCertificatesGetToManyRelated.Input.Path,
        query: Operations.ProfilesCertificatesGetToManyRelated.Input.Query = .init(),
        headers: Operations.ProfilesCertificatesGetToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.ProfilesCertificatesGetToManyRelated.Output {
        try await profilesCertificatesGetToManyRelated(Operations.ProfilesCertificatesGetToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)`.
    public func profilesDevicesGetToManyRelationship(
        path: Operations.ProfilesDevicesGetToManyRelationship.Input.Path,
        query: Operations.ProfilesDevicesGetToManyRelationship.Input.Query = .init(),
        headers: Operations.ProfilesDevicesGetToManyRelationship.Input.Headers = .init()
    ) async throws -> Operations.ProfilesDevicesGetToManyRelationship.Output {
        try await profilesDevicesGetToManyRelationship(Operations.ProfilesDevicesGetToManyRelationship.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)`.
    public func profilesDevicesGetToManyRelated(
        path: Operations.ProfilesDevicesGetToManyRelated.Input.Path,
        query: Operations.ProfilesDevicesGetToManyRelated.Input.Query = .init(),
        headers: Operations.ProfilesDevicesGetToManyRelated.Input.Headers = .init()
    ) async throws -> Operations.ProfilesDevicesGetToManyRelated.Output {
        try await profilesDevicesGetToManyRelated(Operations.ProfilesDevicesGetToManyRelated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.appstoreconnect.apple.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.appstoreconnect.apple.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/App`.
        public struct App: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/App/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case apps = "apps"
            }
            /// - Remark: Generated from `#/components/schemas/App/type`.
            public var _type: Components.Schemas.App._TypePayload
            /// - Remark: Generated from `#/components/schemas/App/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/App/attributes/accessibilityUrl`.
                public var accessibilityUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/bundleId`.
                public var bundleId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/sku`.
                public var sku: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/primaryLocale`.
                public var primaryLocale: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/isOrEverWasMadeForKids`.
                public var isOrEverWasMadeForKids: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrl`.
                public var subscriptionStatusUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrlVersion`.
                public var subscriptionStatusUrlVersion: Components.Schemas.SubscriptionStatusUrlVersion?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrlForSandbox`.
                public var subscriptionStatusUrlForSandbox: Swift.String?
                /// - Remark: Generated from `#/components/schemas/App/attributes/subscriptionStatusUrlVersionForSandbox`.
                public var subscriptionStatusUrlVersionForSandbox: Components.Schemas.SubscriptionStatusUrlVersion?
                /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration`.
                public struct ContentRightsDeclarationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration/value1`.
                    @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
                        case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
                    }
                    /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration/value1`.
                    public var value1: Components.Schemas.App.AttributesPayload.ContentRightsDeclarationPayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration/value2`.
                    public var value2: Swift.String?
                    /// Creates a new `ContentRightsDeclarationPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.App.AttributesPayload.ContentRightsDeclarationPayload.Value1Payload? = nil,
                        value2: Swift.String? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self.value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                self.value1,
                                self.value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            self.value1,
                            self.value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/attributes/contentRightsDeclaration`.
                public var contentRightsDeclaration: Components.Schemas.App.AttributesPayload.ContentRightsDeclarationPayload?
                /// - Remark: Generated from `#/components/schemas/App/attributes/streamlinedPurchasingEnabled`.
                public var streamlinedPurchasingEnabled: Swift.Bool?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - accessibilityUrl:
                ///   - name:
                ///   - bundleId:
                ///   - sku:
                ///   - primaryLocale:
                ///   - isOrEverWasMadeForKids:
                ///   - subscriptionStatusUrl:
                ///   - subscriptionStatusUrlVersion:
                ///   - subscriptionStatusUrlForSandbox:
                ///   - subscriptionStatusUrlVersionForSandbox:
                ///   - contentRightsDeclaration:
                ///   - streamlinedPurchasingEnabled:
                public init(
                    accessibilityUrl: Swift.String? = nil,
                    name: Swift.String? = nil,
                    bundleId: Swift.String? = nil,
                    sku: Swift.String? = nil,
                    primaryLocale: Swift.String? = nil,
                    isOrEverWasMadeForKids: Swift.Bool? = nil,
                    subscriptionStatusUrl: Swift.String? = nil,
                    subscriptionStatusUrlVersion: Components.Schemas.SubscriptionStatusUrlVersion? = nil,
                    subscriptionStatusUrlForSandbox: Swift.String? = nil,
                    subscriptionStatusUrlVersionForSandbox: Components.Schemas.SubscriptionStatusUrlVersion? = nil,
                    contentRightsDeclaration: Components.Schemas.App.AttributesPayload.ContentRightsDeclarationPayload? = nil,
                    streamlinedPurchasingEnabled: Swift.Bool? = nil
                ) {
                    self.accessibilityUrl = accessibilityUrl
                    self.name = name
                    self.bundleId = bundleId
                    self.sku = sku
                    self.primaryLocale = primaryLocale
                    self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
                    self.subscriptionStatusUrl = subscriptionStatusUrl
                    self.subscriptionStatusUrlVersion = subscriptionStatusUrlVersion
                    self.subscriptionStatusUrlForSandbox = subscriptionStatusUrlForSandbox
                    self.subscriptionStatusUrlVersionForSandbox = subscriptionStatusUrlVersionForSandbox
                    self.contentRightsDeclaration = contentRightsDeclaration
                    self.streamlinedPurchasingEnabled = streamlinedPurchasingEnabled
                }
                public enum CodingKeys: String, CodingKey {
                    case accessibilityUrl
                    case name
                    case bundleId
                    case sku
                    case primaryLocale
                    case isOrEverWasMadeForKids
                    case subscriptionStatusUrl
                    case subscriptionStatusUrlVersion
                    case subscriptionStatusUrlForSandbox
                    case subscriptionStatusUrlVersionForSandbox
                    case contentRightsDeclaration
                    case streamlinedPurchasingEnabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/App/attributes`.
            public var attributes: Components.Schemas.App.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/App/relationships`.
            public struct RelationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/App/relationships/accessibilityDeclarations`.
                public struct AccessibilityDeclarationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/accessibilityDeclarations/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `AccessibilityDeclarationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/accessibilityDeclarations`.
                public var accessibilityDeclarations: Components.Schemas.App.RelationshipsPayload.AccessibilityDeclarationsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations`.
                public struct AppEncryptionDeclarationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appEncryptionDeclarations = "appEncryptionDeclarations"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload.DataPayload?
                    /// Creates a new `AppEncryptionDeclarationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEncryptionDeclarations`.
                public var appEncryptionDeclarations: Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct`.
                public struct CiProductPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case ciProducts = "ciProducts"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.CiProductPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.CiProductPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.CiProductPayload.DataPayload?
                    /// Creates a new `CiProductPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.CiProductPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/ciProduct`.
                public var ciProduct: Components.Schemas.App.RelationshipsPayload.CiProductPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaTesters`.
                public struct BetaTestersPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaTesters/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `BetaTestersPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaTesters`.
                public var betaTesters: Components.Schemas.App.RelationshipsPayload.BetaTestersPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups`.
                public struct BetaGroupsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaGroups = "betaGroups"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload.DataPayload?
                    /// Creates a new `BetaGroupsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaGroups`.
                public var betaGroups: Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions`.
                public struct AppStoreVersionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appStoreVersions = "appStoreVersions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload.DataPayload?
                    /// Creates a new `AppStoreVersionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersions`.
                public var appStoreVersions: Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions`.
                public struct PreReleaseVersionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case preReleaseVersions = "preReleaseVersions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload.DataPayload?
                    /// Creates a new `PreReleaseVersionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/preReleaseVersions`.
                public var preReleaseVersions: Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations`.
                public struct BetaAppLocalizationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaAppLocalizations = "betaAppLocalizations"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload.DataPayload?
                    /// Creates a new `BetaAppLocalizationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppLocalizations`.
                public var betaAppLocalizations: Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/builds`.
                public struct BuildsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/builds/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case builds = "builds"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/builds/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.BuildsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/builds/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.BuildsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.BuildsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/builds/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.BuildsPayload.DataPayload?
                    /// Creates a new `BuildsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.BuildsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/builds`.
                public var builds: Components.Schemas.App.RelationshipsPayload.BuildsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement`.
                public struct BetaLicenseAgreementPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaLicenseAgreements = "betaLicenseAgreements"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.BetaLicenseAgreementPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.BetaLicenseAgreementPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.BetaLicenseAgreementPayload.DataPayload?
                    /// Creates a new `BetaLicenseAgreementPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.BetaLicenseAgreementPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaLicenseAgreement`.
                public var betaLicenseAgreement: Components.Schemas.App.RelationshipsPayload.BetaLicenseAgreementPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail`.
                public struct BetaAppReviewDetailPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case betaAppReviewDetails = "betaAppReviewDetails"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.BetaAppReviewDetailPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.BetaAppReviewDetailPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.BetaAppReviewDetailPayload.DataPayload?
                    /// Creates a new `BetaAppReviewDetailPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.BetaAppReviewDetailPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaAppReviewDetail`.
                public var betaAppReviewDetail: Components.Schemas.App.RelationshipsPayload.BetaAppReviewDetailPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos`.
                public struct AppInfosPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appInfos = "appInfos"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppInfosPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppInfosPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppInfosPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppInfosPayload.DataPayload?
                    /// Creates a new `AppInfosPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppInfosPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appInfos`.
                public var appInfos: Components.Schemas.App.RelationshipsPayload.AppInfosPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appClips`.
                public struct AppClipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appClips = "appClips"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppClipsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppClipsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppClipsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appClips/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppClipsPayload.DataPayload?
                    /// Creates a new `AppClipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppClipsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appClips`.
                public var appClips: Components.Schemas.App.RelationshipsPayload.AppClipsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPricePoints`.
                public struct AppPricePointsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appPricePoints/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `AppPricePointsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPricePoints`.
                public var appPricePoints: Components.Schemas.App.RelationshipsPayload.AppPricePointsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement`.
                public struct EndUserLicenseAgreementPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case endUserLicenseAgreements = "endUserLicenseAgreements"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.EndUserLicenseAgreementPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.EndUserLicenseAgreementPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.EndUserLicenseAgreementPayload.DataPayload?
                    /// Creates a new `EndUserLicenseAgreementPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.EndUserLicenseAgreementPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/endUserLicenseAgreement`.
                public var endUserLicenseAgreement: Components.Schemas.App.RelationshipsPayload.EndUserLicenseAgreementPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPriceSchedule`.
                public struct AppPriceSchedulePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appPriceSchedule/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `AppPriceSchedulePayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appPriceSchedule`.
                public var appPriceSchedule: Components.Schemas.App.RelationshipsPayload.AppPriceSchedulePayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appAvailabilityV2`.
                public struct AppAvailabilityV2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appAvailabilityV2/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `AppAvailabilityV2Payload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appAvailabilityV2`.
                public var appAvailabilityV2: Components.Schemas.App.RelationshipsPayload.AppAvailabilityV2Payload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases`.
                public struct InAppPurchasesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inAppPurchases = "inAppPurchases"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload.DataPayload?
                    /// Creates a new `InAppPurchasesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchases`.
                public var inAppPurchases: Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups`.
                public struct SubscriptionGroupsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case subscriptionGroups = "subscriptionGroups"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload.DataPayload?
                    /// Creates a new `SubscriptionGroupsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGroups`.
                public var subscriptionGroups: Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions`.
                public struct GameCenterEnabledVersionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload.DataPayload?
                    /// Creates a new `GameCenterEnabledVersionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterEnabledVersions`.
                public var gameCenterEnabledVersions: Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/perfPowerMetrics`.
                public struct PerfPowerMetricsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/perfPowerMetrics/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `PerfPowerMetricsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/perfPowerMetrics`.
                public var perfPowerMetrics: Components.Schemas.App.RelationshipsPayload.PerfPowerMetricsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages`.
                public struct AppCustomProductPagesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appCustomProductPages = "appCustomProductPages"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload.DataPayload?
                    /// Creates a new `AppCustomProductPagesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appCustomProductPages`.
                public var appCustomProductPages: Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2`.
                public struct InAppPurchasesV2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inAppPurchases = "inAppPurchases"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload.DataPayload?
                    /// Creates a new `InAppPurchasesV2Payload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/inAppPurchasesV2`.
                public var inAppPurchasesV2: Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases`.
                public struct PromotedPurchasesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case promotedPurchases = "promotedPurchases"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload.DataPayload?
                    /// Creates a new `PromotedPurchasesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/promotedPurchases`.
                public var promotedPurchases: Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents`.
                public struct AppEventsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appEvents = "appEvents"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppEventsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppEventsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppEventsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppEventsPayload.DataPayload?
                    /// Creates a new `AppEventsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppEventsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appEvents`.
                public var appEvents: Components.Schemas.App.RelationshipsPayload.AppEventsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions`.
                public struct ReviewSubmissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case reviewSubmissions = "reviewSubmissions"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload.DataPayload?
                    /// Creates a new `ReviewSubmissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/reviewSubmissions`.
                public var reviewSubmissions: Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod`.
                public struct SubscriptionGracePeriodPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case subscriptionGracePeriods = "subscriptionGracePeriods"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.SubscriptionGracePeriodPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.SubscriptionGracePeriodPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.SubscriptionGracePeriodPayload.DataPayload?
                    /// Creates a new `SubscriptionGracePeriodPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.SubscriptionGracePeriodPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/subscriptionGracePeriod`.
                public var subscriptionGracePeriod: Components.Schemas.App.RelationshipsPayload.SubscriptionGracePeriodPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviews`.
                public struct CustomerReviewsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviews/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `CustomerReviewsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviews`.
                public var customerReviews: Components.Schemas.App.RelationshipsPayload.CustomerReviewsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviewSummarizations`.
                public struct CustomerReviewSummarizationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviewSummarizations/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `CustomerReviewSummarizationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/customerReviewSummarizations`.
                public var customerReviewSummarizations: Components.Schemas.App.RelationshipsPayload.CustomerReviewSummarizationsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail`.
                public struct GameCenterDetailPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case gameCenterDetails = "gameCenterDetails"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.GameCenterDetailPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.GameCenterDetailPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.GameCenterDetailPayload.DataPayload?
                    /// Creates a new `GameCenterDetailPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.GameCenterDetailPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/gameCenterDetail`.
                public var gameCenterDetail: Components.Schemas.App.RelationshipsPayload.GameCenterDetailPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2`.
                public struct AppStoreVersionExperimentsV2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case appStoreVersionExperiments = "appStoreVersionExperiments"
                        }
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/DataPayload/type`.
                        public var _type: Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/data`.
                    public typealias DataPayload = [Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2/data`.
                    public var data: Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload.DataPayload?
                    /// Creates a new `AppStoreVersionExperimentsV2Payload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/appStoreVersionExperimentsV2`.
                public var appStoreVersionExperimentsV2: Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/alternativeDistributionKey`.
                public struct AlternativeDistributionKeyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/alternativeDistributionKey/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `AlternativeDistributionKeyPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/alternativeDistributionKey`.
                public var alternativeDistributionKey: Components.Schemas.App.RelationshipsPayload.AlternativeDistributionKeyPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/analyticsReportRequests`.
                public struct AnalyticsReportRequestsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/analyticsReportRequests/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `AnalyticsReportRequestsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/analyticsReportRequests`.
                public var analyticsReportRequests: Components.Schemas.App.RelationshipsPayload.AnalyticsReportRequestsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/marketplaceSearchDetail`.
                public struct MarketplaceSearchDetailPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/marketplaceSearchDetail/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `MarketplaceSearchDetailPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/marketplaceSearchDetail`.
                public var marketplaceSearchDetail: Components.Schemas.App.RelationshipsPayload.MarketplaceSearchDetailPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/backgroundAssets`.
                public struct BackgroundAssetsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/backgroundAssets/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `BackgroundAssetsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/backgroundAssets`.
                public var backgroundAssets: Components.Schemas.App.RelationshipsPayload.BackgroundAssetsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaFeedbackScreenshotSubmissions`.
                public struct BetaFeedbackScreenshotSubmissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaFeedbackScreenshotSubmissions/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `BetaFeedbackScreenshotSubmissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaFeedbackScreenshotSubmissions`.
                public var betaFeedbackScreenshotSubmissions: Components.Schemas.App.RelationshipsPayload.BetaFeedbackScreenshotSubmissionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaFeedbackCrashSubmissions`.
                public struct BetaFeedbackCrashSubmissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/betaFeedbackCrashSubmissions/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `BetaFeedbackCrashSubmissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/betaFeedbackCrashSubmissions`.
                public var betaFeedbackCrashSubmissions: Components.Schemas.App.RelationshipsPayload.BetaFeedbackCrashSubmissionsPayload?
                /// - Remark: Generated from `#/components/schemas/App/relationships/webhooks`.
                public struct WebhooksPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/App/relationships/webhooks/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// Creates a new `WebhooksPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    public init(links: Components.Schemas.RelationshipLinks? = nil) {
                        self.links = links
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                    }
                }
                /// - Remark: Generated from `#/components/schemas/App/relationships/webhooks`.
                public var webhooks: Components.Schemas.App.RelationshipsPayload.WebhooksPayload?
                /// Creates a new `RelationshipsPayload`.
                ///
                /// - Parameters:
                ///   - accessibilityDeclarations:
                ///   - appEncryptionDeclarations:
                ///   - ciProduct:
                ///   - betaTesters:
                ///   - betaGroups:
                ///   - appStoreVersions:
                ///   - preReleaseVersions:
                ///   - betaAppLocalizations:
                ///   - builds:
                ///   - betaLicenseAgreement:
                ///   - betaAppReviewDetail:
                ///   - appInfos:
                ///   - appClips:
                ///   - appPricePoints:
                ///   - endUserLicenseAgreement:
                ///   - appPriceSchedule:
                ///   - appAvailabilityV2:
                ///   - inAppPurchases:
                ///   - subscriptionGroups:
                ///   - gameCenterEnabledVersions:
                ///   - perfPowerMetrics:
                ///   - appCustomProductPages:
                ///   - inAppPurchasesV2:
                ///   - promotedPurchases:
                ///   - appEvents:
                ///   - reviewSubmissions:
                ///   - subscriptionGracePeriod:
                ///   - customerReviews:
                ///   - customerReviewSummarizations:
                ///   - gameCenterDetail:
                ///   - appStoreVersionExperimentsV2:
                ///   - alternativeDistributionKey:
                ///   - analyticsReportRequests:
                ///   - marketplaceSearchDetail:
                ///   - backgroundAssets:
                ///   - betaFeedbackScreenshotSubmissions:
                ///   - betaFeedbackCrashSubmissions:
                ///   - webhooks:
                public init(
                    accessibilityDeclarations: Components.Schemas.App.RelationshipsPayload.AccessibilityDeclarationsPayload? = nil,
                    appEncryptionDeclarations: Components.Schemas.App.RelationshipsPayload.AppEncryptionDeclarationsPayload? = nil,
                    ciProduct: Components.Schemas.App.RelationshipsPayload.CiProductPayload? = nil,
                    betaTesters: Components.Schemas.App.RelationshipsPayload.BetaTestersPayload? = nil,
                    betaGroups: Components.Schemas.App.RelationshipsPayload.BetaGroupsPayload? = nil,
                    appStoreVersions: Components.Schemas.App.RelationshipsPayload.AppStoreVersionsPayload? = nil,
                    preReleaseVersions: Components.Schemas.App.RelationshipsPayload.PreReleaseVersionsPayload? = nil,
                    betaAppLocalizations: Components.Schemas.App.RelationshipsPayload.BetaAppLocalizationsPayload? = nil,
                    builds: Components.Schemas.App.RelationshipsPayload.BuildsPayload? = nil,
                    betaLicenseAgreement: Components.Schemas.App.RelationshipsPayload.BetaLicenseAgreementPayload? = nil,
                    betaAppReviewDetail: Components.Schemas.App.RelationshipsPayload.BetaAppReviewDetailPayload? = nil,
                    appInfos: Components.Schemas.App.RelationshipsPayload.AppInfosPayload? = nil,
                    appClips: Components.Schemas.App.RelationshipsPayload.AppClipsPayload? = nil,
                    appPricePoints: Components.Schemas.App.RelationshipsPayload.AppPricePointsPayload? = nil,
                    endUserLicenseAgreement: Components.Schemas.App.RelationshipsPayload.EndUserLicenseAgreementPayload? = nil,
                    appPriceSchedule: Components.Schemas.App.RelationshipsPayload.AppPriceSchedulePayload? = nil,
                    appAvailabilityV2: Components.Schemas.App.RelationshipsPayload.AppAvailabilityV2Payload? = nil,
                    inAppPurchases: Components.Schemas.App.RelationshipsPayload.InAppPurchasesPayload? = nil,
                    subscriptionGroups: Components.Schemas.App.RelationshipsPayload.SubscriptionGroupsPayload? = nil,
                    gameCenterEnabledVersions: Components.Schemas.App.RelationshipsPayload.GameCenterEnabledVersionsPayload? = nil,
                    perfPowerMetrics: Components.Schemas.App.RelationshipsPayload.PerfPowerMetricsPayload? = nil,
                    appCustomProductPages: Components.Schemas.App.RelationshipsPayload.AppCustomProductPagesPayload? = nil,
                    inAppPurchasesV2: Components.Schemas.App.RelationshipsPayload.InAppPurchasesV2Payload? = nil,
                    promotedPurchases: Components.Schemas.App.RelationshipsPayload.PromotedPurchasesPayload? = nil,
                    appEvents: Components.Schemas.App.RelationshipsPayload.AppEventsPayload? = nil,
                    reviewSubmissions: Components.Schemas.App.RelationshipsPayload.ReviewSubmissionsPayload? = nil,
                    subscriptionGracePeriod: Components.Schemas.App.RelationshipsPayload.SubscriptionGracePeriodPayload? = nil,
                    customerReviews: Components.Schemas.App.RelationshipsPayload.CustomerReviewsPayload? = nil,
                    customerReviewSummarizations: Components.Schemas.App.RelationshipsPayload.CustomerReviewSummarizationsPayload? = nil,
                    gameCenterDetail: Components.Schemas.App.RelationshipsPayload.GameCenterDetailPayload? = nil,
                    appStoreVersionExperimentsV2: Components.Schemas.App.RelationshipsPayload.AppStoreVersionExperimentsV2Payload? = nil,
                    alternativeDistributionKey: Components.Schemas.App.RelationshipsPayload.AlternativeDistributionKeyPayload? = nil,
                    analyticsReportRequests: Components.Schemas.App.RelationshipsPayload.AnalyticsReportRequestsPayload? = nil,
                    marketplaceSearchDetail: Components.Schemas.App.RelationshipsPayload.MarketplaceSearchDetailPayload? = nil,
                    backgroundAssets: Components.Schemas.App.RelationshipsPayload.BackgroundAssetsPayload? = nil,
                    betaFeedbackScreenshotSubmissions: Components.Schemas.App.RelationshipsPayload.BetaFeedbackScreenshotSubmissionsPayload? = nil,
                    betaFeedbackCrashSubmissions: Components.Schemas.App.RelationshipsPayload.BetaFeedbackCrashSubmissionsPayload? = nil,
                    webhooks: Components.Schemas.App.RelationshipsPayload.WebhooksPayload? = nil
                ) {
                    self.accessibilityDeclarations = accessibilityDeclarations
                    self.appEncryptionDeclarations = appEncryptionDeclarations
                    self.ciProduct = ciProduct
                    self.betaTesters = betaTesters
                    self.betaGroups = betaGroups
                    self.appStoreVersions = appStoreVersions
                    self.preReleaseVersions = preReleaseVersions
                    self.betaAppLocalizations = betaAppLocalizations
                    self.builds = builds
                    self.betaLicenseAgreement = betaLicenseAgreement
                    self.betaAppReviewDetail = betaAppReviewDetail
                    self.appInfos = appInfos
                    self.appClips = appClips
                    self.appPricePoints = appPricePoints
                    self.endUserLicenseAgreement = endUserLicenseAgreement
                    self.appPriceSchedule = appPriceSchedule
                    self.appAvailabilityV2 = appAvailabilityV2
                    self.inAppPurchases = inAppPurchases
                    self.subscriptionGroups = subscriptionGroups
                    self.gameCenterEnabledVersions = gameCenterEnabledVersions
                    self.perfPowerMetrics = perfPowerMetrics
                    self.appCustomProductPages = appCustomProductPages
                    self.inAppPurchasesV2 = inAppPurchasesV2
                    self.promotedPurchases = promotedPurchases
                    self.appEvents = appEvents
                    self.reviewSubmissions = reviewSubmissions
                    self.subscriptionGracePeriod = subscriptionGracePeriod
                    self.customerReviews = customerReviews
                    self.customerReviewSummarizations = customerReviewSummarizations
                    self.gameCenterDetail = gameCenterDetail
                    self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
                    self.alternativeDistributionKey = alternativeDistributionKey
                    self.analyticsReportRequests = analyticsReportRequests
                    self.marketplaceSearchDetail = marketplaceSearchDetail
                    self.backgroundAssets = backgroundAssets
                    self.betaFeedbackScreenshotSubmissions = betaFeedbackScreenshotSubmissions
                    self.betaFeedbackCrashSubmissions = betaFeedbackCrashSubmissions
                    self.webhooks = webhooks
                }
                public enum CodingKeys: String, CodingKey {
                    case accessibilityDeclarations
                    case appEncryptionDeclarations
                    case ciProduct
                    case betaTesters
                    case betaGroups
                    case appStoreVersions
                    case preReleaseVersions
                    case betaAppLocalizations
                    case builds
                    case betaLicenseAgreement
                    case betaAppReviewDetail
                    case appInfos
                    case appClips
                    case appPricePoints
                    case endUserLicenseAgreement
                    case appPriceSchedule
                    case appAvailabilityV2
                    case inAppPurchases
                    case subscriptionGroups
                    case gameCenterEnabledVersions
                    case perfPowerMetrics
                    case appCustomProductPages
                    case inAppPurchasesV2
                    case promotedPurchases
                    case appEvents
                    case reviewSubmissions
                    case subscriptionGracePeriod
                    case customerReviews
                    case customerReviewSummarizations
                    case gameCenterDetail
                    case appStoreVersionExperimentsV2
                    case alternativeDistributionKey
                    case analyticsReportRequests
                    case marketplaceSearchDetail
                    case backgroundAssets
                    case betaFeedbackScreenshotSubmissions
                    case betaFeedbackCrashSubmissions
                    case webhooks
                }
            }
            /// - Remark: Generated from `#/components/schemas/App/relationships`.
            public var relationships: Components.Schemas.App.RelationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/App/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `App`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            public init(
                _type: Components.Schemas.App._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.App.AttributesPayload? = nil,
                relationships: Components.Schemas.App.RelationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapability`.
        public struct BundleIdCapability: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bundleIdCapabilities = "bundleIdCapabilities"
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/type`.
            public var _type: Components.Schemas.BundleIdCapability._TypePayload
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes/capabilityType`.
                public var capabilityType: Components.Schemas.CapabilityType?
                /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes/settings`.
                public var settings: [Components.Schemas.CapabilitySetting]?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - capabilityType:
                ///   - settings:
                public init(
                    capabilityType: Components.Schemas.CapabilityType? = nil,
                    settings: [Components.Schemas.CapabilitySetting]? = nil
                ) {
                    self.capabilityType = capabilityType
                    self.settings = settings
                }
                public enum CodingKeys: String, CodingKey {
                    case capabilityType
                    case settings
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/attributes`.
            public var attributes: Components.Schemas.BundleIdCapability.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/BundleIdCapability/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `BundleIdCapability`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - links:
            public init(
                _type: Components.Schemas.BundleIdCapability._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.BundleIdCapability.AttributesPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityResponse`.
        public struct BundleIdCapabilityResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityResponse/data`.
            public var data: Components.Schemas.BundleIdCapability
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdCapabilityResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.BundleIdCapability,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest`.
        public struct BundleIdCapabilityCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIdCapabilities = "bundleIdCapabilities"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/type`.
                public var _type: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes/capabilityType`.
                    public var capabilityType: Components.Schemas.CapabilityType
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes/settings`.
                    public var settings: [Components.Schemas.CapabilitySetting]?
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - capabilityType:
                    ///   - settings:
                    public init(
                        capabilityType: Components.Schemas.CapabilityType,
                        settings: [Components.Schemas.CapabilitySetting]? = nil
                    ) {
                        self.capabilityType = capabilityType
                        self.settings = settings
                    }
                    public enum CodingKeys: String, CodingKey {
                        case capabilityType
                        case settings
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/attributes`.
                public var attributes: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.AttributesPayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships`.
                public struct RelationshipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId`.
                    public struct BundleIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data`.
                        public struct DataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bundleIds = "bundleIds"
                            }
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data/type`.
                            public var _type: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data/id`.
                            public var id: Swift.String
                            /// Creates a new `DataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload._TypePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId/data`.
                        public var data: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload
                        /// Creates a new `BundleIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/bundleId`.
                    public var bundleId: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability`.
                    public struct CapabilityPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability/data`.
                        public struct DataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability/data/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case capabilities = "capabilities"
                            }
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability/data/type`.
                            public var _type: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.CapabilityPayload.DataPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability/data/id`.
                            public var id: Components.Schemas.CapabilityType
                            /// Creates a new `DataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.CapabilityPayload.DataPayload._TypePayload,
                                id: Components.Schemas.CapabilityType
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability/data`.
                        public var data: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.CapabilityPayload.DataPayload
                        /// Creates a new `CapabilityPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.CapabilityPayload.DataPayload) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships/capability`.
                    public var capability: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.CapabilityPayload
                    /// Creates a new `RelationshipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - bundleId:
                    ///   - capability:
                    public init(
                        bundleId: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload,
                        capability: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload.CapabilityPayload
                    ) {
                        self.bundleId = bundleId
                        self.capability = capability
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bundleId
                        case capability
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data/relationships`.
                public var relationships: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                ///   - relationships:
                public init(
                    _type: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload._TypePayload,
                    attributes: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.AttributesPayload,
                    relationships: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload.RelationshipsPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                    self.relationships = relationships
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                    case relationships
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityCreateRequest/data`.
            public var data: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload
            /// Creates a new `BundleIdCapabilityCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.BundleIdCapabilityCreateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest`.
        public struct BundleIdCapabilityUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIdCapabilities = "bundleIdCapabilities"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/type`.
                public var _type: Components.Schemas.BundleIdCapabilityUpdateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes/capabilityType`.
                    public var capabilityType: Components.Schemas.CapabilityType?
                    /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes/settings`.
                    public var settings: [Components.Schemas.CapabilitySetting]?
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - capabilityType:
                    ///   - settings:
                    public init(
                        capabilityType: Components.Schemas.CapabilityType? = nil,
                        settings: [Components.Schemas.CapabilitySetting]? = nil
                    ) {
                        self.capabilityType = capabilityType
                        self.settings = settings
                    }
                    public enum CodingKeys: String, CodingKey {
                        case capabilityType
                        case settings
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data/attributes`.
                public var attributes: Components.Schemas.BundleIdCapabilityUpdateRequest.DataPayload.AttributesPayload?
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                public init(
                    _type: Components.Schemas.BundleIdCapabilityUpdateRequest.DataPayload._TypePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.BundleIdCapabilityUpdateRequest.DataPayload.AttributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilityUpdateRequest/data`.
            public var data: Components.Schemas.BundleIdCapabilityUpdateRequest.DataPayload
            /// Creates a new `BundleIdCapabilityUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.BundleIdCapabilityUpdateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleId`.
        public struct BundleId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleId/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bundleIds = "bundleIds"
            }
            /// - Remark: Generated from `#/components/schemas/BundleId/type`.
            public var _type: Components.Schemas.BundleId._TypePayload
            /// - Remark: Generated from `#/components/schemas/BundleId/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BundleId/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/platform`.
                public var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/identifier`.
                public var identifier: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BundleId/attributes/seedId`.
                public var seedId: Swift.String?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - platform:
                ///   - identifier:
                ///   - seedId:
                public init(
                    name: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    identifier: Swift.String? = nil,
                    seedId: Swift.String? = nil
                ) {
                    self.name = name
                    self.platform = platform
                    self.identifier = identifier
                    self.seedId = seedId
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case platform
                    case identifier
                    case seedId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleId/attributes`.
            public var attributes: Components.Schemas.BundleId.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/BundleId/relationships`.
            public struct RelationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles`.
                public struct ProfilesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case profiles = "profiles"
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/DataPayload/type`.
                        public var _type: Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/data`.
                    public typealias DataPayload = [Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles/data`.
                    public var data: Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload.DataPayload?
                    /// Creates a new `ProfilesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/profiles`.
                public var profiles: Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload?
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities`.
                public struct BundleIdCapabilitiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bundleIdCapabilities = "bundleIdCapabilities"
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/DataPayload/type`.
                        public var _type: Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/data`.
                    public typealias DataPayload = [Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities/data`.
                    public var data: Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload.DataPayload?
                    /// Creates a new `BundleIdCapabilitiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/bundleIdCapabilities`.
                public var bundleIdCapabilities: Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload?
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app`.
                public struct AppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case apps = "apps"
                        }
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data/type`.
                        public var _type: Components.Schemas.BundleId.RelationshipsPayload.AppPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.BundleId.RelationshipsPayload.AppPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app/data`.
                    public var data: Components.Schemas.BundleId.RelationshipsPayload.AppPayload.DataPayload?
                    /// Creates a new `AppPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.BundleId.RelationshipsPayload.AppPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleId/relationships/app`.
                public var app: Components.Schemas.BundleId.RelationshipsPayload.AppPayload?
                /// Creates a new `RelationshipsPayload`.
                ///
                /// - Parameters:
                ///   - profiles:
                ///   - bundleIdCapabilities:
                ///   - app:
                public init(
                    profiles: Components.Schemas.BundleId.RelationshipsPayload.ProfilesPayload? = nil,
                    bundleIdCapabilities: Components.Schemas.BundleId.RelationshipsPayload.BundleIdCapabilitiesPayload? = nil,
                    app: Components.Schemas.BundleId.RelationshipsPayload.AppPayload? = nil
                ) {
                    self.profiles = profiles
                    self.bundleIdCapabilities = bundleIdCapabilities
                    self.app = app
                }
                public enum CodingKeys: String, CodingKey {
                    case profiles
                    case bundleIdCapabilities
                    case app
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleId/relationships`.
            public var relationships: Components.Schemas.BundleId.RelationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/BundleId/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `BundleId`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            public init(
                _type: Components.Schemas.BundleId._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.BundleId.AttributesPayload? = nil,
                relationships: Components.Schemas.BundleId.RelationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdsResponse`.
        public struct BundleIdsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/data`.
            public var data: [Components.Schemas.BundleId]
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/IncludedPayload`.
            @frozen public enum IncludedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/IncludedPayload/case1`.
                case Profile(Components.Schemas.Profile)
                /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/IncludedPayload/case2`.
                case BundleIdCapability(Components.Schemas.BundleIdCapability)
                /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/IncludedPayload/case3`.
                case App(Components.Schemas.App)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Profile(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .BundleIdCapability(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .App(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Profile(value):
                        try value.encode(to: encoder)
                    case let .BundleIdCapability(value):
                        try value.encode(to: encoder)
                    case let .App(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/included`.
            public typealias IncludedPayload = [Components.Schemas.BundleIdsResponse.IncludedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/included`.
            public var included: Components.Schemas.BundleIdsResponse.IncludedPayload?
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/BundleIdsResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `BundleIdsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.BundleId],
                included: Components.Schemas.BundleIdsResponse.IncludedPayload? = nil,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.included = included
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdResponse`.
        public struct BundleIdResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/data`.
            public var data: Components.Schemas.BundleId
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/IncludedPayload`.
            @frozen public enum IncludedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdResponse/IncludedPayload/case1`.
                case Profile(Components.Schemas.Profile)
                /// - Remark: Generated from `#/components/schemas/BundleIdResponse/IncludedPayload/case2`.
                case BundleIdCapability(Components.Schemas.BundleIdCapability)
                /// - Remark: Generated from `#/components/schemas/BundleIdResponse/IncludedPayload/case3`.
                case App(Components.Schemas.App)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Profile(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .BundleIdCapability(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .App(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Profile(value):
                        try value.encode(to: encoder)
                    case let .BundleIdCapability(value):
                        try value.encode(to: encoder)
                    case let .App(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/included`.
            public typealias IncludedPayload = [Components.Schemas.BundleIdResponse.IncludedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/included`.
            public var included: Components.Schemas.BundleIdResponse.IncludedPayload?
            /// - Remark: Generated from `#/components/schemas/BundleIdResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            public init(
                data: Components.Schemas.BundleId,
                included: Components.Schemas.BundleIdResponse.IncludedPayload? = nil,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.included = included
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest`.
        public struct BundleIdCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIds = "bundleIds"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/type`.
                public var _type: Components.Schemas.BundleIdCreateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/platform`.
                    public var platform: Components.Schemas.BundleIdPlatform
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/identifier`.
                    public var identifier: Swift.String
                    /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes/seedId`.
                    public var seedId: Swift.String?
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - platform:
                    ///   - identifier:
                    ///   - seedId:
                    public init(
                        name: Swift.String,
                        platform: Components.Schemas.BundleIdPlatform,
                        identifier: Swift.String,
                        seedId: Swift.String? = nil
                    ) {
                        self.name = name
                        self.platform = platform
                        self.identifier = identifier
                        self.seedId = seedId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case platform
                        case identifier
                        case seedId
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data/attributes`.
                public var attributes: Components.Schemas.BundleIdCreateRequest.DataPayload.AttributesPayload
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                public init(
                    _type: Components.Schemas.BundleIdCreateRequest.DataPayload._TypePayload,
                    attributes: Components.Schemas.BundleIdCreateRequest.DataPayload.AttributesPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdCreateRequest/data`.
            public var data: Components.Schemas.BundleIdCreateRequest.DataPayload
            /// Creates a new `BundleIdCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.BundleIdCreateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest`.
        public struct BundleIdUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIds = "bundleIds"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/type`.
                public var _type: Components.Schemas.BundleIdUpdateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/attributes/name`.
                    public var name: Swift.String?
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    public init(name: Swift.String? = nil) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data/attributes`.
                public var attributes: Components.Schemas.BundleIdUpdateRequest.DataPayload.AttributesPayload?
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                public init(
                    _type: Components.Schemas.BundleIdUpdateRequest.DataPayload._TypePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.BundleIdUpdateRequest.DataPayload.AttributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdUpdateRequest/data`.
            public var data: Components.Schemas.BundleIdUpdateRequest.DataPayload
            /// Creates a new `BundleIdUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.BundleIdUpdateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/Certificate`.
        public struct Certificate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Certificate/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case certificates = "certificates"
            }
            /// - Remark: Generated from `#/components/schemas/Certificate/type`.
            public var _type: Components.Schemas.Certificate._TypePayload
            /// - Remark: Generated from `#/components/schemas/Certificate/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Certificate/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/certificateType`.
                public var certificateType: Components.Schemas.CertificateType?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/displayName`.
                public var displayName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/serialNumber`.
                public var serialNumber: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/platform`.
                public var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/expirationDate`.
                public var expirationDate: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/certificateContent`.
                public var certificateContent: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Certificate/attributes/activated`.
                public var activated: Swift.Bool?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - certificateType:
                ///   - displayName:
                ///   - serialNumber:
                ///   - platform:
                ///   - expirationDate:
                ///   - certificateContent:
                ///   - activated:
                public init(
                    name: Swift.String? = nil,
                    certificateType: Components.Schemas.CertificateType? = nil,
                    displayName: Swift.String? = nil,
                    serialNumber: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    expirationDate: Foundation.Date? = nil,
                    certificateContent: Swift.String? = nil,
                    activated: Swift.Bool? = nil
                ) {
                    self.name = name
                    self.certificateType = certificateType
                    self.displayName = displayName
                    self.serialNumber = serialNumber
                    self.platform = platform
                    self.expirationDate = expirationDate
                    self.certificateContent = certificateContent
                    self.activated = activated
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case certificateType
                    case displayName
                    case serialNumber
                    case platform
                    case expirationDate
                    case certificateContent
                    case activated
                }
            }
            /// - Remark: Generated from `#/components/schemas/Certificate/attributes`.
            public var attributes: Components.Schemas.Certificate.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/Certificate/relationships`.
            public struct RelationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId`.
                public struct PassTypeIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case passTypeIds = "passTypeIds"
                        }
                        /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId/data/type`.
                        public var _type: Components.Schemas.Certificate.RelationshipsPayload.PassTypeIdPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.Certificate.RelationshipsPayload.PassTypeIdPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId/data`.
                    public var data: Components.Schemas.Certificate.RelationshipsPayload.PassTypeIdPayload.DataPayload?
                    /// Creates a new `PassTypeIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.Certificate.RelationshipsPayload.PassTypeIdPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Certificate/relationships/passTypeId`.
                public var passTypeId: Components.Schemas.Certificate.RelationshipsPayload.PassTypeIdPayload?
                /// Creates a new `RelationshipsPayload`.
                ///
                /// - Parameters:
                ///   - passTypeId:
                public init(passTypeId: Components.Schemas.Certificate.RelationshipsPayload.PassTypeIdPayload? = nil) {
                    self.passTypeId = passTypeId
                }
                public enum CodingKeys: String, CodingKey {
                    case passTypeId
                }
            }
            /// - Remark: Generated from `#/components/schemas/Certificate/relationships`.
            public var relationships: Components.Schemas.Certificate.RelationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/Certificate/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `Certificate`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            public init(
                _type: Components.Schemas.Certificate._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.Certificate.AttributesPayload? = nil,
                relationships: Components.Schemas.Certificate.RelationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificatesResponse`.
        public struct CertificatesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/data`.
            public var data: [Components.Schemas.Certificate]
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/included`.
            public var included: [Components.Schemas.PassTypeId]?
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/CertificatesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `CertificatesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.Certificate],
                included: [Components.Schemas.PassTypeId]? = nil,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.included = included
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificateResponse`.
        public struct CertificateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificateResponse/data`.
            public var data: Components.Schemas.Certificate
            /// - Remark: Generated from `#/components/schemas/CertificateResponse/included`.
            public var included: [Components.Schemas.PassTypeId]?
            /// - Remark: Generated from `#/components/schemas/CertificateResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `CertificateResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            public init(
                data: Components.Schemas.Certificate,
                included: [Components.Schemas.PassTypeId]? = nil,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.included = included
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest`.
        public struct CertificateCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/type`.
                public var _type: Components.Schemas.CertificateCreateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes/csrContent`.
                    public var csrContent: Swift.String
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes/certificateType`.
                    public var certificateType: Components.Schemas.CertificateType
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - csrContent:
                    ///   - certificateType:
                    public init(
                        csrContent: Swift.String,
                        certificateType: Components.Schemas.CertificateType
                    ) {
                        self.csrContent = csrContent
                        self.certificateType = certificateType
                    }
                    public enum CodingKeys: String, CodingKey {
                        case csrContent
                        case certificateType
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/attributes`.
                public var attributes: Components.Schemas.CertificateCreateRequest.DataPayload.AttributesPayload
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships`.
                public struct RelationshipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId`.
                    public struct MerchantIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId/data`.
                        public struct DataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId/data/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case merchantIds = "merchantIds"
                            }
                            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId/data/type`.
                            public var _type: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.MerchantIdPayload.DataPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId/data/id`.
                            public var id: Swift.String
                            /// Creates a new `DataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.MerchantIdPayload.DataPayload._TypePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId/data`.
                        public var data: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.MerchantIdPayload.DataPayload?
                        /// Creates a new `MerchantIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.MerchantIdPayload.DataPayload? = nil) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/merchantId`.
                    public var merchantId: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.MerchantIdPayload?
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId`.
                    public struct PassTypeIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId/data`.
                        public struct DataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId/data/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case passTypeIds = "passTypeIds"
                            }
                            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId/data/type`.
                            public var _type: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.PassTypeIdPayload.DataPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId/data/id`.
                            public var id: Swift.String
                            /// Creates a new `DataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.PassTypeIdPayload.DataPayload._TypePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId/data`.
                        public var data: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.PassTypeIdPayload.DataPayload?
                        /// Creates a new `PassTypeIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.PassTypeIdPayload.DataPayload? = nil) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships/passTypeId`.
                    public var passTypeId: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.PassTypeIdPayload?
                    /// Creates a new `RelationshipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - merchantId:
                    ///   - passTypeId:
                    public init(
                        merchantId: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.MerchantIdPayload? = nil,
                        passTypeId: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload.PassTypeIdPayload? = nil
                    ) {
                        self.merchantId = merchantId
                        self.passTypeId = passTypeId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case merchantId
                        case passTypeId
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data/relationships`.
                public var relationships: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload?
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                ///   - relationships:
                public init(
                    _type: Components.Schemas.CertificateCreateRequest.DataPayload._TypePayload,
                    attributes: Components.Schemas.CertificateCreateRequest.DataPayload.AttributesPayload,
                    relationships: Components.Schemas.CertificateCreateRequest.DataPayload.RelationshipsPayload? = nil
                ) {
                    self._type = _type
                    self.attributes = attributes
                    self.relationships = relationships
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                    case relationships
                }
            }
            /// - Remark: Generated from `#/components/schemas/CertificateCreateRequest/data`.
            public var data: Components.Schemas.CertificateCreateRequest.DataPayload
            /// Creates a new `CertificateCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.CertificateCreateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest`.
        public struct CertificateUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data/type`.
                public var _type: Components.Schemas.CertificateUpdateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data/attributes/activated`.
                    public var activated: Swift.Bool?
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - activated:
                    public init(activated: Swift.Bool? = nil) {
                        self.activated = activated
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activated
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data/attributes`.
                public var attributes: Components.Schemas.CertificateUpdateRequest.DataPayload.AttributesPayload?
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                public init(
                    _type: Components.Schemas.CertificateUpdateRequest.DataPayload._TypePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.CertificateUpdateRequest.DataPayload.AttributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/CertificateUpdateRequest/data`.
            public var data: Components.Schemas.CertificateUpdateRequest.DataPayload
            /// Creates a new `CertificateUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.CertificateUpdateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/Device`.
        public struct Device: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Device/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case devices = "devices"
            }
            /// - Remark: Generated from `#/components/schemas/Device/type`.
            public var _type: Components.Schemas.Device._TypePayload
            /// - Remark: Generated from `#/components/schemas/Device/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Device/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Device/attributes/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/platform`.
                public var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/udid`.
                public var udid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass`.
                public struct DeviceClassPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass/value1`.
                    @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case appleVisionPro = "APPLE_VISION_PRO"
                        case appleWatch = "APPLE_WATCH"
                        case ipad = "IPAD"
                        case iphone = "IPHONE"
                        case ipod = "IPOD"
                        case appleTv = "APPLE_TV"
                        case mac = "MAC"
                    }
                    /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass/value1`.
                    public var value1: Components.Schemas.Device.AttributesPayload.DeviceClassPayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass/value2`.
                    public var value2: Swift.String?
                    /// Creates a new `DeviceClassPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.Device.AttributesPayload.DeviceClassPayload.Value1Payload? = nil,
                        value2: Swift.String? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self.value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                self.value1,
                                self.value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            self.value1,
                            self.value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Device/attributes/deviceClass`.
                public var deviceClass: Components.Schemas.Device.AttributesPayload.DeviceClassPayload?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/status`.
                public struct StatusPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Device/attributes/status/value1`.
                    @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case enabled = "ENABLED"
                        case disabled = "DISABLED"
                    }
                    /// - Remark: Generated from `#/components/schemas/Device/attributes/status/value1`.
                    public var value1: Components.Schemas.Device.AttributesPayload.StatusPayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/Device/attributes/status/value2`.
                    public var value2: Swift.String?
                    /// Creates a new `StatusPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.Device.AttributesPayload.StatusPayload.Value1Payload? = nil,
                        value2: Swift.String? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self.value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                self.value1,
                                self.value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            self.value1,
                            self.value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Device/attributes/status`.
                public var status: Components.Schemas.Device.AttributesPayload.StatusPayload?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/model`.
                public var model: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Device/attributes/addedDate`.
                public var addedDate: Foundation.Date?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - platform:
                ///   - udid:
                ///   - deviceClass:
                ///   - status:
                ///   - model:
                ///   - addedDate:
                public init(
                    name: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    udid: Swift.String? = nil,
                    deviceClass: Components.Schemas.Device.AttributesPayload.DeviceClassPayload? = nil,
                    status: Components.Schemas.Device.AttributesPayload.StatusPayload? = nil,
                    model: Swift.String? = nil,
                    addedDate: Foundation.Date? = nil
                ) {
                    self.name = name
                    self.platform = platform
                    self.udid = udid
                    self.deviceClass = deviceClass
                    self.status = status
                    self.model = model
                    self.addedDate = addedDate
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case platform
                    case udid
                    case deviceClass
                    case status
                    case model
                    case addedDate
                }
            }
            /// - Remark: Generated from `#/components/schemas/Device/attributes`.
            public var attributes: Components.Schemas.Device.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/Device/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `Device`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - links:
            public init(
                _type: Components.Schemas.Device._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.Device.AttributesPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/DevicesResponse`.
        public struct DevicesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DevicesResponse/data`.
            public var data: [Components.Schemas.Device]
            /// - Remark: Generated from `#/components/schemas/DevicesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/DevicesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `DevicesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.Device],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceResponse`.
        public struct DeviceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceResponse/data`.
            public var data: Components.Schemas.Device
            /// - Remark: Generated from `#/components/schemas/DeviceResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `DeviceResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.Device,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest`.
        public struct DeviceCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case devices = "devices"
                }
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/type`.
                public var _type: Components.Schemas.DeviceCreateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes/platform`.
                    public var platform: Components.Schemas.BundleIdPlatform
                    /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes/udid`.
                    public var udid: Swift.String
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - platform:
                    ///   - udid:
                    public init(
                        name: Swift.String,
                        platform: Components.Schemas.BundleIdPlatform,
                        udid: Swift.String
                    ) {
                        self.name = name
                        self.platform = platform
                        self.udid = udid
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case platform
                        case udid
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data/attributes`.
                public var attributes: Components.Schemas.DeviceCreateRequest.DataPayload.AttributesPayload
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                public init(
                    _type: Components.Schemas.DeviceCreateRequest.DataPayload._TypePayload,
                    attributes: Components.Schemas.DeviceCreateRequest.DataPayload.AttributesPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeviceCreateRequest/data`.
            public var data: Components.Schemas.DeviceCreateRequest.DataPayload
            /// Creates a new `DeviceCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.DeviceCreateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest`.
        public struct DeviceUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case devices = "devices"
                }
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/type`.
                public var _type: Components.Schemas.DeviceUpdateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status`.
                    public struct StatusPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status/value1`.
                        @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                            case enabled = "ENABLED"
                            case disabled = "DISABLED"
                        }
                        /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status/value1`.
                        public var value1: Components.Schemas.DeviceUpdateRequest.DataPayload.AttributesPayload.StatusPayload.Value1Payload?
                        /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `StatusPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.DeviceUpdateRequest.DataPayload.AttributesPayload.StatusPayload.Value1Payload? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes/status`.
                    public var status: Components.Schemas.DeviceUpdateRequest.DataPayload.AttributesPayload.StatusPayload?
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - status:
                    public init(
                        name: Swift.String? = nil,
                        status: Components.Schemas.DeviceUpdateRequest.DataPayload.AttributesPayload.StatusPayload? = nil
                    ) {
                        self.name = name
                        self.status = status
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case status
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data/attributes`.
                public var attributes: Components.Schemas.DeviceUpdateRequest.DataPayload.AttributesPayload?
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - attributes:
                public init(
                    _type: Components.Schemas.DeviceUpdateRequest.DataPayload._TypePayload,
                    id: Swift.String,
                    attributes: Components.Schemas.DeviceUpdateRequest.DataPayload.AttributesPayload? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.attributes = attributes
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case attributes
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeviceUpdateRequest/data`.
            public var data: Components.Schemas.DeviceUpdateRequest.DataPayload
            /// Creates a new `DeviceUpdateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.DeviceUpdateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/PassTypeId`.
        public struct PassTypeId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PassTypeId/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passTypeIds = "passTypeIds"
            }
            /// - Remark: Generated from `#/components/schemas/PassTypeId/type`.
            public var _type: Components.Schemas.PassTypeId._TypePayload
            /// - Remark: Generated from `#/components/schemas/PassTypeId/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PassTypeId/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PassTypeId/attributes/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PassTypeId/attributes/identifier`.
                public var identifier: Swift.String?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - identifier:
                public init(
                    name: Swift.String? = nil,
                    identifier: Swift.String? = nil
                ) {
                    self.name = name
                    self.identifier = identifier
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case identifier
                }
            }
            /// - Remark: Generated from `#/components/schemas/PassTypeId/attributes`.
            public var attributes: Components.Schemas.PassTypeId.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships`.
            public struct RelationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates`.
                public struct CertificatesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case certificates = "certificates"
                        }
                        /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/DataPayload/type`.
                        public var _type: Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/data`.
                    public typealias DataPayload = [Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates/data`.
                    public var data: Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload.DataPayload?
                    /// Creates a new `CertificatesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships/certificates`.
                public var certificates: Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload?
                /// Creates a new `RelationshipsPayload`.
                ///
                /// - Parameters:
                ///   - certificates:
                public init(certificates: Components.Schemas.PassTypeId.RelationshipsPayload.CertificatesPayload? = nil) {
                    self.certificates = certificates
                }
                public enum CodingKeys: String, CodingKey {
                    case certificates
                }
            }
            /// - Remark: Generated from `#/components/schemas/PassTypeId/relationships`.
            public var relationships: Components.Schemas.PassTypeId.RelationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/PassTypeId/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `PassTypeId`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            public init(
                _type: Components.Schemas.PassTypeId._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.PassTypeId.AttributesPayload? = nil,
                relationships: Components.Schemas.PassTypeId.RelationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/PassTypeIdResponse`.
        public struct PassTypeIdResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PassTypeIdResponse/data`.
            public var data: Components.Schemas.PassTypeId
            /// - Remark: Generated from `#/components/schemas/PassTypeIdResponse/included`.
            public var included: [Components.Schemas.Certificate]?
            /// - Remark: Generated from `#/components/schemas/PassTypeIdResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `PassTypeIdResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            public init(
                data: Components.Schemas.PassTypeId,
                included: [Components.Schemas.Certificate]? = nil,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.included = included
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/Profile`.
        public struct Profile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Profile/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case profiles = "profiles"
            }
            /// - Remark: Generated from `#/components/schemas/Profile/type`.
            public var _type: Components.Schemas.Profile._TypePayload
            /// - Remark: Generated from `#/components/schemas/Profile/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Profile/attributes`.
            public struct AttributesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/platform`.
                public var platform: Components.Schemas.BundleIdPlatform?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType`.
                public struct ProfileTypePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType/value1`.
                    @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
                        case iosAppStore = "IOS_APP_STORE"
                        case iosAppAdhoc = "IOS_APP_ADHOC"
                        case iosAppInhouse = "IOS_APP_INHOUSE"
                        case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                        case macAppStore = "MAC_APP_STORE"
                        case macAppDirect = "MAC_APP_DIRECT"
                        case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
                        case tvosAppStore = "TVOS_APP_STORE"
                        case tvosAppAdhoc = "TVOS_APP_ADHOC"
                        case tvosAppInhouse = "TVOS_APP_INHOUSE"
                        case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
                        case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
                        case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType/value1`.
                    public var value1: Components.Schemas.Profile.AttributesPayload.ProfileTypePayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType/value2`.
                    public var value2: Swift.String?
                    /// Creates a new `ProfileTypePayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.Profile.AttributesPayload.ProfileTypePayload.Value1Payload? = nil,
                        value2: Swift.String? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self.value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                self.value1,
                                self.value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            self.value1,
                            self.value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileType`.
                public var profileType: Components.Schemas.Profile.AttributesPayload.ProfileTypePayload?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState`.
                public struct ProfileStatePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState/value1`.
                    @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case active = "ACTIVE"
                        case invalid = "INVALID"
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState/value1`.
                    public var value1: Components.Schemas.Profile.AttributesPayload.ProfileStatePayload.Value1Payload?
                    /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState/value2`.
                    public var value2: Swift.String?
                    /// Creates a new `ProfileStatePayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.Profile.AttributesPayload.ProfileStatePayload.Value1Payload? = nil,
                        value2: Swift.String? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self.value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                self.value1,
                                self.value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            self.value1,
                            self.value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileState`.
                public var profileState: Components.Schemas.Profile.AttributesPayload.ProfileStatePayload?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/profileContent`.
                public var profileContent: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/uuid`.
                public var uuid: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/createdDate`.
                public var createdDate: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Profile/attributes/expirationDate`.
                public var expirationDate: Foundation.Date?
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - platform:
                ///   - profileType:
                ///   - profileState:
                ///   - profileContent:
                ///   - uuid:
                ///   - createdDate:
                ///   - expirationDate:
                public init(
                    name: Swift.String? = nil,
                    platform: Components.Schemas.BundleIdPlatform? = nil,
                    profileType: Components.Schemas.Profile.AttributesPayload.ProfileTypePayload? = nil,
                    profileState: Components.Schemas.Profile.AttributesPayload.ProfileStatePayload? = nil,
                    profileContent: Swift.String? = nil,
                    uuid: Swift.String? = nil,
                    createdDate: Foundation.Date? = nil,
                    expirationDate: Foundation.Date? = nil
                ) {
                    self.name = name
                    self.platform = platform
                    self.profileType = profileType
                    self.profileState = profileState
                    self.profileContent = profileContent
                    self.uuid = uuid
                    self.createdDate = createdDate
                    self.expirationDate = expirationDate
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case platform
                    case profileType
                    case profileState
                    case profileContent
                    case uuid
                    case createdDate
                    case expirationDate
                }
            }
            /// - Remark: Generated from `#/components/schemas/Profile/attributes`.
            public var attributes: Components.Schemas.Profile.AttributesPayload?
            /// - Remark: Generated from `#/components/schemas/Profile/relationships`.
            public struct RelationshipsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId`.
                public struct BundleIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data`.
                    public struct DataPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bundleIds = "bundleIds"
                        }
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data/type`.
                        public var _type: Components.Schemas.Profile.RelationshipsPayload.BundleIdPayload.DataPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.Profile.RelationshipsPayload.BundleIdPayload.DataPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId/data`.
                    public var data: Components.Schemas.Profile.RelationshipsPayload.BundleIdPayload.DataPayload?
                    /// Creates a new `BundleIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        data: Components.Schemas.Profile.RelationshipsPayload.BundleIdPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/bundleId`.
                public var bundleId: Components.Schemas.Profile.RelationshipsPayload.BundleIdPayload?
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices`.
                public struct DevicesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case devices = "devices"
                        }
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/DataPayload/type`.
                        public var _type: Components.Schemas.Profile.RelationshipsPayload.DevicesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.Profile.RelationshipsPayload.DevicesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/data`.
                    public typealias DataPayload = [Components.Schemas.Profile.RelationshipsPayload.DevicesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices/data`.
                    public var data: Components.Schemas.Profile.RelationshipsPayload.DevicesPayload.DataPayload?
                    /// Creates a new `DevicesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.Profile.RelationshipsPayload.DevicesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/devices`.
                public var devices: Components.Schemas.Profile.RelationshipsPayload.DevicesPayload?
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates`.
                public struct CertificatesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/links`.
                    public var links: Components.Schemas.RelationshipLinks?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/meta`.
                    public var meta: Components.Schemas.PagingInformation?
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/DataPayload`.
                    public struct DataPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/DataPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case certificates = "certificates"
                        }
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/DataPayload/type`.
                        public var _type: Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload.DataPayloadPayload._TypePayload
                        /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/DataPayload/id`.
                        public var id: Swift.String
                        /// Creates a new `DataPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id:
                        public init(
                            _type: Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload.DataPayloadPayload._TypePayload,
                            id: Swift.String
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/data`.
                    public typealias DataPayload = [Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload.DataPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates/data`.
                    public var data: Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload.DataPayload?
                    /// Creates a new `CertificatesPayload`.
                    ///
                    /// - Parameters:
                    ///   - links:
                    ///   - meta:
                    ///   - data:
                    public init(
                        links: Components.Schemas.RelationshipLinks? = nil,
                        meta: Components.Schemas.PagingInformation? = nil,
                        data: Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload.DataPayload? = nil
                    ) {
                        self.links = links
                        self.meta = meta
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links
                        case meta
                        case data
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Profile/relationships/certificates`.
                public var certificates: Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload?
                /// Creates a new `RelationshipsPayload`.
                ///
                /// - Parameters:
                ///   - bundleId:
                ///   - devices:
                ///   - certificates:
                public init(
                    bundleId: Components.Schemas.Profile.RelationshipsPayload.BundleIdPayload? = nil,
                    devices: Components.Schemas.Profile.RelationshipsPayload.DevicesPayload? = nil,
                    certificates: Components.Schemas.Profile.RelationshipsPayload.CertificatesPayload? = nil
                ) {
                    self.bundleId = bundleId
                    self.devices = devices
                    self.certificates = certificates
                }
                public enum CodingKeys: String, CodingKey {
                    case bundleId
                    case devices
                    case certificates
                }
            }
            /// - Remark: Generated from `#/components/schemas/Profile/relationships`.
            public var relationships: Components.Schemas.Profile.RelationshipsPayload?
            /// - Remark: Generated from `#/components/schemas/Profile/links`.
            public var links: Components.Schemas.ResourceLinks?
            /// Creates a new `Profile`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - attributes:
            ///   - relationships:
            ///   - links:
            public init(
                _type: Components.Schemas.Profile._TypePayload,
                id: Swift.String,
                attributes: Components.Schemas.Profile.AttributesPayload? = nil,
                relationships: Components.Schemas.Profile.RelationshipsPayload? = nil,
                links: Components.Schemas.ResourceLinks? = nil
            ) {
                self._type = _type
                self.id = id
                self.attributes = attributes
                self.relationships = relationships
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case attributes
                case relationships
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfilesResponse`.
        public struct ProfilesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/data`.
            public var data: [Components.Schemas.Profile]
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/IncludedPayload`.
            @frozen public enum IncludedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfilesResponse/IncludedPayload/case1`.
                case BundleId(Components.Schemas.BundleId)
                /// - Remark: Generated from `#/components/schemas/ProfilesResponse/IncludedPayload/case2`.
                case Device(Components.Schemas.Device)
                /// - Remark: Generated from `#/components/schemas/ProfilesResponse/IncludedPayload/case3`.
                case Certificate(Components.Schemas.Certificate)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .BundleId(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Device(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Certificate(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .BundleId(value):
                        try value.encode(to: encoder)
                    case let .Device(value):
                        try value.encode(to: encoder)
                    case let .Certificate(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/included`.
            public typealias IncludedPayload = [Components.Schemas.ProfilesResponse.IncludedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/included`.
            public var included: Components.Schemas.ProfilesResponse.IncludedPayload?
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/ProfilesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `ProfilesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.Profile],
                included: Components.Schemas.ProfilesResponse.IncludedPayload? = nil,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.included = included
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileResponse`.
        public struct ProfileResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/data`.
            public var data: Components.Schemas.Profile
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/IncludedPayload`.
            @frozen public enum IncludedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileResponse/IncludedPayload/case1`.
                case BundleId(Components.Schemas.BundleId)
                /// - Remark: Generated from `#/components/schemas/ProfileResponse/IncludedPayload/case2`.
                case Device(Components.Schemas.Device)
                /// - Remark: Generated from `#/components/schemas/ProfileResponse/IncludedPayload/case3`.
                case Certificate(Components.Schemas.Certificate)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .BundleId(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Device(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Certificate(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .BundleId(value):
                        try value.encode(to: encoder)
                    case let .Device(value):
                        try value.encode(to: encoder)
                    case let .Certificate(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/included`.
            public typealias IncludedPayload = [Components.Schemas.ProfileResponse.IncludedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/included`.
            public var included: Components.Schemas.ProfileResponse.IncludedPayload?
            /// - Remark: Generated from `#/components/schemas/ProfileResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `ProfileResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - included:
            ///   - links:
            public init(
                data: Components.Schemas.Profile,
                included: Components.Schemas.ProfileResponse.IncludedPayload? = nil,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.included = included
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case included
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest`.
        public struct ProfileCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/type`.
                public var _type: Components.Schemas.ProfileCreateRequest.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes`.
                public struct AttributesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType`.
                    public struct ProfileTypePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType/value1`.
                        @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                            case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
                            case iosAppStore = "IOS_APP_STORE"
                            case iosAppAdhoc = "IOS_APP_ADHOC"
                            case iosAppInhouse = "IOS_APP_INHOUSE"
                            case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                            case macAppStore = "MAC_APP_STORE"
                            case macAppDirect = "MAC_APP_DIRECT"
                            case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
                            case tvosAppStore = "TVOS_APP_STORE"
                            case tvosAppAdhoc = "TVOS_APP_ADHOC"
                            case tvosAppInhouse = "TVOS_APP_INHOUSE"
                            case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
                            case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
                            case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType/value1`.
                        public var value1: Components.Schemas.ProfileCreateRequest.DataPayload.AttributesPayload.ProfileTypePayload.Value1Payload?
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ProfileTypePayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.ProfileCreateRequest.DataPayload.AttributesPayload.ProfileTypePayload.Value1Payload? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes/profileType`.
                    public var profileType: Components.Schemas.ProfileCreateRequest.DataPayload.AttributesPayload.ProfileTypePayload
                    /// Creates a new `AttributesPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - profileType:
                    public init(
                        name: Swift.String,
                        profileType: Components.Schemas.ProfileCreateRequest.DataPayload.AttributesPayload.ProfileTypePayload
                    ) {
                        self.name = name
                        self.profileType = profileType
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case profileType
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/attributes`.
                public var attributes: Components.Schemas.ProfileCreateRequest.DataPayload.AttributesPayload
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships`.
                public struct RelationshipsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId`.
                    public struct BundleIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data`.
                        public struct DataPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bundleIds = "bundleIds"
                            }
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data/type`.
                            public var _type: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data/id`.
                            public var id: Swift.String
                            /// Creates a new `DataPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload._TypePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId/data`.
                        public var data: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload
                        /// Creates a new `BundleIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload.DataPayload) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/bundleId`.
                    public var bundleId: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices`.
                    public struct DevicesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/DataPayload`.
                        public struct DataPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/DataPayload/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case devices = "devices"
                            }
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/DataPayload/type`.
                            public var _type: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload.DataPayloadPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/DataPayload/id`.
                            public var id: Swift.String
                            /// Creates a new `DataPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload.DataPayloadPayload._TypePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/data`.
                        public typealias DataPayload = [Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload.DataPayloadPayload]
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices/data`.
                        public var data: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload.DataPayload?
                        /// Creates a new `DevicesPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload.DataPayload? = nil) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/devices`.
                    public var devices: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload?
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates`.
                    public struct CertificatesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/DataPayload`.
                        public struct DataPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/DataPayload/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case certificates = "certificates"
                            }
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/DataPayload/type`.
                            public var _type: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload.DataPayloadPayload._TypePayload
                            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/DataPayload/id`.
                            public var id: Swift.String
                            /// Creates a new `DataPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - _type:
                            ///   - id:
                            public init(
                                _type: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload.DataPayloadPayload._TypePayload,
                                id: Swift.String
                            ) {
                                self._type = _type
                                self.id = id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case _type = "type"
                                case id
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/data`.
                        public typealias DataPayload = [Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload.DataPayloadPayload]
                        /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates/data`.
                        public var data: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload.DataPayload
                        /// Creates a new `CertificatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        public init(data: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload.DataPayload) {
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships/certificates`.
                    public var certificates: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload
                    /// Creates a new `RelationshipsPayload`.
                    ///
                    /// - Parameters:
                    ///   - bundleId:
                    ///   - devices:
                    ///   - certificates:
                    public init(
                        bundleId: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.BundleIdPayload,
                        devices: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.DevicesPayload? = nil,
                        certificates: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload.CertificatesPayload
                    ) {
                        self.bundleId = bundleId
                        self.devices = devices
                        self.certificates = certificates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bundleId
                        case devices
                        case certificates
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data/relationships`.
                public var relationships: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - attributes:
                ///   - relationships:
                public init(
                    _type: Components.Schemas.ProfileCreateRequest.DataPayload._TypePayload,
                    attributes: Components.Schemas.ProfileCreateRequest.DataPayload.AttributesPayload,
                    relationships: Components.Schemas.ProfileCreateRequest.DataPayload.RelationshipsPayload
                ) {
                    self._type = _type
                    self.attributes = attributes
                    self.relationships = relationships
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case attributes
                    case relationships
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileCreateRequest/data`.
            public var data: Components.Schemas.ProfileCreateRequest.DataPayload
            /// Creates a new `ProfileCreateRequest`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.ProfileCreateRequest.DataPayload) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppWithoutIncludesResponse`.
        public struct AppWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppWithoutIncludesResponse/data`.
            public var data: Components.Schemas.App
            /// - Remark: Generated from `#/components/schemas/AppWithoutIncludesResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `AppWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.App,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse`.
        public struct BundleIdAppLinkageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case apps = "apps"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse/data/type`.
                public var _type: Components.Schemas.BundleIdAppLinkageResponse.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse/data/id`.
                public var id: Swift.String
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.BundleIdAppLinkageResponse.DataPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse/data`.
            public var data: Components.Schemas.BundleIdAppLinkageResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/BundleIdAppLinkageResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdAppLinkageResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.BundleIdAppLinkageResponse.DataPayload,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse`.
        public struct BundleIdCapabilitiesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse/data`.
            public var data: [Components.Schemas.BundleIdCapability]
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/BundleIdCapabilitiesWithoutIncludesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `BundleIdCapabilitiesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.BundleIdCapability],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse`.
        public struct BundleIdBundleIdCapabilitiesLinkagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/DataPayload`.
            public struct DataPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/DataPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIdCapabilities = "bundleIdCapabilities"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/DataPayload/type`.
                public var _type: Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse.DataPayloadPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/DataPayload/id`.
                public var id: Swift.String
                /// Creates a new `DataPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse.DataPayloadPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/data`.
            public typealias DataPayload = [Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse.DataPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/data`.
            public var data: Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/BundleIdBundleIdCapabilitiesLinkagesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `BundleIdBundleIdCapabilitiesLinkagesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse.DataPayload,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse`.
        public struct ProfilesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse/data`.
            public var data: [Components.Schemas.Profile]
            /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/ProfilesWithoutIncludesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `ProfilesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.Profile],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse`.
        public struct BundleIdProfilesLinkagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/DataPayload`.
            public struct DataPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/DataPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                }
                /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/DataPayload/type`.
                public var _type: Components.Schemas.BundleIdProfilesLinkagesResponse.DataPayloadPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/DataPayload/id`.
                public var id: Swift.String
                /// Creates a new `DataPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.BundleIdProfilesLinkagesResponse.DataPayloadPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/data`.
            public typealias DataPayload = [Components.Schemas.BundleIdProfilesLinkagesResponse.DataPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/data`.
            public var data: Components.Schemas.BundleIdProfilesLinkagesResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/BundleIdProfilesLinkagesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `BundleIdProfilesLinkagesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: Components.Schemas.BundleIdProfilesLinkagesResponse.DataPayload,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse`.
        public struct CertificatePassTypeIdLinkageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case passTypeIds = "passTypeIds"
                }
                /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse/data/type`.
                public var _type: Components.Schemas.CertificatePassTypeIdLinkageResponse.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse/data/id`.
                public var id: Swift.String
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.CertificatePassTypeIdLinkageResponse.DataPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse/data`.
            public var data: Components.Schemas.CertificatePassTypeIdLinkageResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/CertificatePassTypeIdLinkageResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `CertificatePassTypeIdLinkageResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.CertificatePassTypeIdLinkageResponse.DataPayload,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdWithoutIncludesResponse`.
        public struct BundleIdWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdWithoutIncludesResponse/data`.
            public var data: Components.Schemas.BundleId
            /// - Remark: Generated from `#/components/schemas/BundleIdWithoutIncludesResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `BundleIdWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.BundleId,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse`.
        public struct ProfileBundleIdLinkageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse/data`.
            public struct DataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse/data/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleIds = "bundleIds"
                }
                /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse/data/type`.
                public var _type: Components.Schemas.ProfileBundleIdLinkageResponse.DataPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse/data/id`.
                public var id: Swift.String
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.ProfileBundleIdLinkageResponse.DataPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse/data`.
            public var data: Components.Schemas.ProfileBundleIdLinkageResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/ProfileBundleIdLinkageResponse/links`.
            public var links: Components.Schemas.DocumentLinks
            /// Creates a new `ProfileBundleIdLinkageResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            public init(
                data: Components.Schemas.ProfileBundleIdLinkageResponse.DataPayload,
                links: Components.Schemas.DocumentLinks
            ) {
                self.data = data
                self.links = links
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse`.
        public struct CertificatesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse/data`.
            public var data: [Components.Schemas.Certificate]
            /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/CertificatesWithoutIncludesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `CertificatesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.Certificate],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse`.
        public struct ProfileCertificatesLinkagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/DataPayload`.
            public struct DataPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/DataPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/DataPayload/type`.
                public var _type: Components.Schemas.ProfileCertificatesLinkagesResponse.DataPayloadPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/DataPayload/id`.
                public var id: Swift.String
                /// Creates a new `DataPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.ProfileCertificatesLinkagesResponse.DataPayloadPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/data`.
            public typealias DataPayload = [Components.Schemas.ProfileCertificatesLinkagesResponse.DataPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/data`.
            public var data: Components.Schemas.ProfileCertificatesLinkagesResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/ProfileCertificatesLinkagesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `ProfileCertificatesLinkagesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: Components.Schemas.ProfileCertificatesLinkagesResponse.DataPayload,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse`.
        public struct DevicesWithoutIncludesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse/data`.
            public var data: [Components.Schemas.Device]
            /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/DevicesWithoutIncludesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `DevicesWithoutIncludesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: [Components.Schemas.Device],
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse`.
        public struct ProfileDevicesLinkagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/DataPayload`.
            public struct DataPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/DataPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case devices = "devices"
                }
                /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/DataPayload/type`.
                public var _type: Components.Schemas.ProfileDevicesLinkagesResponse.DataPayloadPayload._TypePayload
                /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/DataPayload/id`.
                public var id: Swift.String
                /// Creates a new `DataPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                public init(
                    _type: Components.Schemas.ProfileDevicesLinkagesResponse.DataPayloadPayload._TypePayload,
                    id: Swift.String
                ) {
                    self._type = _type
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/data`.
            public typealias DataPayload = [Components.Schemas.ProfileDevicesLinkagesResponse.DataPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/data`.
            public var data: Components.Schemas.ProfileDevicesLinkagesResponse.DataPayload
            /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/links`.
            public var links: Components.Schemas.PagedDocumentLinks
            /// - Remark: Generated from `#/components/schemas/ProfileDevicesLinkagesResponse/meta`.
            public var meta: Components.Schemas.PagingInformation?
            /// Creates a new `ProfileDevicesLinkagesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - links:
            ///   - meta:
            public init(
                data: Components.Schemas.ProfileDevicesLinkagesResponse.DataPayload,
                links: Components.Schemas.PagedDocumentLinks,
                meta: Components.Schemas.PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload`.
            public struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/status`.
                public var status: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/detail`.
                public var detail: Swift.String
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/source`.
                @frozen public enum SourcePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/source/case1`.
                    case ErrorSourcePointer(Components.Schemas.ErrorSourcePointer)
                    /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/source/case2`.
                    case ErrorSourceParameter(Components.Schemas.ErrorSourceParameter)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .ErrorSourcePointer(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ErrorSourceParameter(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .ErrorSourcePointer(value):
                            try value.encode(to: encoder)
                        case let .ErrorSourceParameter(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/source`.
                public var source: Components.Schemas.ErrorResponse.ErrorsPayloadPayload.SourcePayload?
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/links`.
                public var links: Components.Schemas.ErrorLinks?
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/meta`.
                public struct MetaPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                    /// Creates a new `MetaPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ErrorResponse/ErrorsPayload/meta`.
                public var meta: Components.Schemas.ErrorResponse.ErrorsPayloadPayload.MetaPayload?
                /// Creates a new `ErrorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - status:
                ///   - code:
                ///   - title:
                ///   - detail:
                ///   - source:
                ///   - links:
                ///   - meta:
                public init(
                    id: Swift.String? = nil,
                    status: Swift.String,
                    code: Swift.String,
                    title: Swift.String,
                    detail: Swift.String,
                    source: Components.Schemas.ErrorResponse.ErrorsPayloadPayload.SourcePayload? = nil,
                    links: Components.Schemas.ErrorLinks? = nil,
                    meta: Components.Schemas.ErrorResponse.ErrorsPayloadPayload.MetaPayload? = nil
                ) {
                    self.id = id
                    self.status = status
                    self.code = code
                    self.title = title
                    self.detail = detail
                    self.source = source
                    self.links = links
                    self.meta = meta
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case status
                    case code
                    case title
                    case detail
                    case source
                    case links
                    case meta
                }
            }
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/errors`.
            public typealias ErrorsPayload = [Components.Schemas.ErrorResponse.ErrorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/errors`.
            public var errors: Components.Schemas.ErrorResponse.ErrorsPayload?
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - errors:
            public init(errors: Components.Schemas.ErrorResponse.ErrorsPayload? = nil) {
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case errors
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorSourceParameter`.
        public struct ErrorSourceParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorSourceParameter/parameter`.
            public var parameter: Swift.String
            /// Creates a new `ErrorSourceParameter`.
            ///
            /// - Parameters:
            ///   - parameter:
            public init(parameter: Swift.String) {
                self.parameter = parameter
            }
            public enum CodingKeys: String, CodingKey {
                case parameter
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorSourcePointer`.
        public struct ErrorSourcePointer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorSourcePointer/pointer`.
            public var pointer: Swift.String
            /// Creates a new `ErrorSourcePointer`.
            ///
            /// - Parameters:
            ///   - pointer:
            public init(pointer: Swift.String) {
                self.pointer = pointer
            }
            public enum CodingKeys: String, CodingKey {
                case pointer
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorLinks`.
        public struct ErrorLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorLinks/about`.
            public var about: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated`.
            @frozen public enum AssociatedPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/href`.
                    public var href: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/meta`.
                    public struct MetaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/meta/source`.
                        public var source: Swift.String?
                        /// Creates a new `MetaPayload`.
                        ///
                        /// - Parameters:
                        ///   - source:
                        public init(source: Swift.String? = nil) {
                            self.source = source
                        }
                        public enum CodingKeys: String, CodingKey {
                            case source
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2/meta`.
                    public var meta: Components.Schemas.ErrorLinks.AssociatedPayload.Case2Payload.MetaPayload?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    ///   - meta:
                    public init(
                        href: Swift.String? = nil,
                        meta: Components.Schemas.ErrorLinks.AssociatedPayload.Case2Payload.MetaPayload? = nil
                    ) {
                        self.href = href
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated/case2`.
                case case2(Components.Schemas.ErrorLinks.AssociatedPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/ErrorLinks/associated`.
            public var associated: Components.Schemas.ErrorLinks.AssociatedPayload?
            /// Creates a new `ErrorLinks`.
            ///
            /// - Parameters:
            ///   - about:
            ///   - associated:
            public init(
                about: Swift.String? = nil,
                associated: Components.Schemas.ErrorLinks.AssociatedPayload? = nil
            ) {
                self.about = about
                self.associated = associated
            }
            public enum CodingKeys: String, CodingKey {
                case about
                case associated
            }
        }
        /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks`.
        public struct PagedDocumentLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks/self`.
            public var _self: Swift.String
            /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks/first`.
            public var first: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PagedDocumentLinks/next`.
            public var next: Swift.String?
            /// Creates a new `PagedDocumentLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            ///   - first:
            ///   - next:
            public init(
                _self: Swift.String,
                first: Swift.String? = nil,
                next: Swift.String? = nil
            ) {
                self._self = _self
                self.first = first
                self.next = next
            }
            public enum CodingKeys: String, CodingKey {
                case _self = "self"
                case first
                case next
            }
        }
        /// - Remark: Generated from `#/components/schemas/PagingInformation`.
        public struct PagingInformation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PagingInformation/paging`.
            public struct PagingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PagingInformation/paging/total`.
                public var total: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/PagingInformation/paging/limit`.
                public var limit: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PagingInformation/paging/nextCursor`.
                public var nextCursor: Swift.String?
                /// Creates a new `PagingPayload`.
                ///
                /// - Parameters:
                ///   - total:
                ///   - limit:
                ///   - nextCursor:
                public init(
                    total: Swift.Int? = nil,
                    limit: Swift.Int,
                    nextCursor: Swift.String? = nil
                ) {
                    self.total = total
                    self.limit = limit
                    self.nextCursor = nextCursor
                }
                public enum CodingKeys: String, CodingKey {
                    case total
                    case limit
                    case nextCursor
                }
            }
            /// - Remark: Generated from `#/components/schemas/PagingInformation/paging`.
            public var paging: Components.Schemas.PagingInformation.PagingPayload
            /// Creates a new `PagingInformation`.
            ///
            /// - Parameters:
            ///   - paging:
            public init(paging: Components.Schemas.PagingInformation.PagingPayload) {
                self.paging = paging
            }
            public enum CodingKeys: String, CodingKey {
                case paging
            }
        }
        /// - Remark: Generated from `#/components/schemas/DocumentLinks`.
        public struct DocumentLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentLinks/self`.
            public var _self: Swift.String
            /// Creates a new `DocumentLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            public init(_self: Swift.String) {
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResourceLinks`.
        public struct ResourceLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResourceLinks/self`.
            public var _self: Swift.String?
            /// Creates a new `ResourceLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            public init(_self: Swift.String? = nil) {
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// - Remark: Generated from `#/components/schemas/RelationshipLinks`.
        public struct RelationshipLinks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RelationshipLinks/self`.
            public var _self: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RelationshipLinks/related`.
            public var related: Swift.String?
            /// Creates a new `RelationshipLinks`.
            ///
            /// - Parameters:
            ///   - _self:
            ///   - related:
            public init(
                _self: Swift.String? = nil,
                related: Swift.String? = nil
            ) {
                self._self = _self
                self.related = related
            }
            public enum CodingKeys: String, CodingKey {
                case _self = "self"
                case related
            }
        }
        /// - Remark: Generated from `#/components/schemas/BundleIdPlatform`.
        public struct BundleIdPlatform: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BundleIdPlatform/value1`.
            @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case ios = "IOS"
                case macOs = "MAC_OS"
                case universal = "UNIVERSAL"
            }
            /// - Remark: Generated from `#/components/schemas/BundleIdPlatform/value1`.
            public var value1: Components.Schemas.BundleIdPlatform.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/BundleIdPlatform/value2`.
            public var value2: Swift.String?
            /// Creates a new `BundleIdPlatform`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.BundleIdPlatform.Value1Payload? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CapabilityOption`.
        public struct CapabilityOption: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/key`.
            public struct KeyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CapabilityOption/key/value1`.
                @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case xcode5 = "XCODE_5"
                    case xcode6 = "XCODE_6"
                    case completeProtection = "COMPLETE_PROTECTION"
                    case protectedUnlessOpen = "PROTECTED_UNLESS_OPEN"
                    case protectedUntilFirstUserAuth = "PROTECTED_UNTIL_FIRST_USER_AUTH"
                    case primaryAppConsent = "PRIMARY_APP_CONSENT"
                }
                /// - Remark: Generated from `#/components/schemas/CapabilityOption/key/value1`.
                public var value1: Components.Schemas.CapabilityOption.KeyPayload.Value1Payload?
                /// - Remark: Generated from `#/components/schemas/CapabilityOption/key/value2`.
                public var value2: Swift.String?
                /// Creates a new `KeyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CapabilityOption.KeyPayload.Value1Payload? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/key`.
            public var key: Components.Schemas.CapabilityOption.KeyPayload?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/enabledByDefault`.
            public var enabledByDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/enabled`.
            public var enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilityOption/supportsWildcard`.
            public var supportsWildcard: Swift.Bool?
            /// Creates a new `CapabilityOption`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - description:
            ///   - enabledByDefault:
            ///   - enabled:
            ///   - supportsWildcard:
            public init(
                key: Components.Schemas.CapabilityOption.KeyPayload? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                enabledByDefault: Swift.Bool? = nil,
                enabled: Swift.Bool? = nil,
                supportsWildcard: Swift.Bool? = nil
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.enabledByDefault = enabledByDefault
                self.enabled = enabled
                self.supportsWildcard = supportsWildcard
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case enabledByDefault
                case enabled
                case supportsWildcard
            }
        }
        /// - Remark: Generated from `#/components/schemas/CapabilitySetting`.
        public struct CapabilitySetting: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key`.
            public struct KeyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key/value1`.
                @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case icloudVersion = "ICLOUD_VERSION"
                    case dataProtectionPermissionLevel = "DATA_PROTECTION_PERMISSION_LEVEL"
                    case appleIdAuthAppConsent = "APPLE_ID_AUTH_APP_CONSENT"
                }
                /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key/value1`.
                public var value1: Components.Schemas.CapabilitySetting.KeyPayload.Value1Payload?
                /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key/value2`.
                public var value2: Swift.String?
                /// Creates a new `KeyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CapabilitySetting.KeyPayload.Value1Payload? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/key`.
            public var key: Components.Schemas.CapabilitySetting.KeyPayload?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/enabledByDefault`.
            public var enabledByDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/visible`.
            public var visible: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances`.
            public struct AllowedInstancesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances/value1`.
                @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case entry = "ENTRY"
                    case single = "SINGLE"
                    case multiple = "MULTIPLE"
                }
                /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances/value1`.
                public var value1: Components.Schemas.CapabilitySetting.AllowedInstancesPayload.Value1Payload?
                /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances/value2`.
                public var value2: Swift.String?
                /// Creates a new `AllowedInstancesPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CapabilitySetting.AllowedInstancesPayload.Value1Payload? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/allowedInstances`.
            public var allowedInstances: Components.Schemas.CapabilitySetting.AllowedInstancesPayload?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/minInstances`.
            public var minInstances: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CapabilitySetting/options`.
            public var options: [Components.Schemas.CapabilityOption]?
            /// Creates a new `CapabilitySetting`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - description:
            ///   - enabledByDefault:
            ///   - visible:
            ///   - allowedInstances:
            ///   - minInstances:
            ///   - options:
            public init(
                key: Components.Schemas.CapabilitySetting.KeyPayload? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                enabledByDefault: Swift.Bool? = nil,
                visible: Swift.Bool? = nil,
                allowedInstances: Components.Schemas.CapabilitySetting.AllowedInstancesPayload? = nil,
                minInstances: Swift.Int? = nil,
                options: [Components.Schemas.CapabilityOption]? = nil
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.enabledByDefault = enabledByDefault
                self.visible = visible
                self.allowedInstances = allowedInstances
                self.minInstances = minInstances
                self.options = options
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case enabledByDefault
                case visible
                case allowedInstances
                case minInstances
                case options
            }
        }
        /// - Remark: Generated from `#/components/schemas/CapabilityType`.
        public struct CapabilityType: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CapabilityType/value1`.
            @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case icloud = "ICLOUD"
                case inAppPurchase = "IN_APP_PURCHASE"
                case gameCenter = "GAME_CENTER"
                case pushNotifications = "PUSH_NOTIFICATIONS"
                case wallet = "WALLET"
                case interAppAudio = "INTER_APP_AUDIO"
                case maps = "MAPS"
                case associatedDomains = "ASSOCIATED_DOMAINS"
                case personalVpn = "PERSONAL_VPN"
                case appGroups = "APP_GROUPS"
                case healthkit = "HEALTHKIT"
                case homekit = "HOMEKIT"
                case wirelessAccessoryConfiguration = "WIRELESS_ACCESSORY_CONFIGURATION"
                case applePay = "APPLE_PAY"
                case dataProtection = "DATA_PROTECTION"
                case sirikit = "SIRIKIT"
                case networkExtensions = "NETWORK_EXTENSIONS"
                case multipath = "MULTIPATH"
                case hotSpot = "HOT_SPOT"
                case nfcTagReading = "NFC_TAG_READING"
                case classkit = "CLASSKIT"
                case autofillCredentialProvider = "AUTOFILL_CREDENTIAL_PROVIDER"
                case accessWifiInformation = "ACCESS_WIFI_INFORMATION"
                case networkCustomProtocol = "NETWORK_CUSTOM_PROTOCOL"
                case coremediaHlsLowLatency = "COREMEDIA_HLS_LOW_LATENCY"
                case systemExtensionInstall = "SYSTEM_EXTENSION_INSTALL"
                case userManagement = "USER_MANAGEMENT"
                case appleIdAuth = "APPLE_ID_AUTH"
            }
            /// - Remark: Generated from `#/components/schemas/CapabilityType/value1`.
            public var value1: Components.Schemas.CapabilityType.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/CapabilityType/value2`.
            public var value2: Swift.String?
            /// Creates a new `CapabilityType`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.CapabilityType.Value1Payload? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CertificateType`.
        public struct CertificateType: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CertificateType/value1`.
            @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case applePay = "APPLE_PAY"
                case applePayMerchantIdentity = "APPLE_PAY_MERCHANT_IDENTITY"
                case applePayPspIdentity = "APPLE_PAY_PSP_IDENTITY"
                case applePayRsa = "APPLE_PAY_RSA"
                case developerIdKext = "DEVELOPER_ID_KEXT"
                case developerIdKextG2 = "DEVELOPER_ID_KEXT_G2"
                case developerIdApplication = "DEVELOPER_ID_APPLICATION"
                case developerIdApplicationG2 = "DEVELOPER_ID_APPLICATION_G2"
                case development = "DEVELOPMENT"
                case distribution = "DISTRIBUTION"
                case identityAccess = "IDENTITY_ACCESS"
                case iosDevelopment = "IOS_DEVELOPMENT"
                case iosDistribution = "IOS_DISTRIBUTION"
                case macAppDistribution = "MAC_APP_DISTRIBUTION"
                case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
                case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                case passTypeId = "PASS_TYPE_ID"
                case passTypeIdWithNfc = "PASS_TYPE_ID_WITH_NFC"
            }
            /// - Remark: Generated from `#/components/schemas/CertificateType/value1`.
            public var value1: Components.Schemas.CertificateType.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/CertificateType/value2`.
            public var value2: Swift.String?
            /// Creates a new `CertificateType`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.CertificateType.Value1Payload? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionStatusUrlVersion`.
        public struct SubscriptionStatusUrlVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionStatusUrlVersion/value1`.
            @frozen public enum Value1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case v1 = "V1"
                case v2 = "V2"
            }
            /// - Remark: Generated from `#/components/schemas/SubscriptionStatusUrlVersion/value1`.
            public var value1: Components.Schemas.SubscriptionStatusUrlVersion.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/SubscriptionStatusUrlVersion/value2`.
            public var value2: Swift.String?
            /// Creates a new `SubscriptionStatusUrlVersion`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.SubscriptionStatusUrlVersion.Value1Payload? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `POST /v1/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)`.
    public enum BundleIdCapabilitiesCreateInstance {
        public static let id: Swift.String = "bundleIdCapabilities_createInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdCapabilitiesCreateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdCapabilitiesCreateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdCapabilitiesCreateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdCapabilityCreateRequest)
            }
            public var body: Operations.BundleIdCapabilitiesCreateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BundleIdCapabilitiesCreateInstance.Input.Headers = .init(),
                body: Operations.BundleIdCapabilitiesCreateInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.BundleIdCapabilityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdCapabilityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single BundleIdCapability
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.BundleIdCapabilitiesCreateInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.BundleIdCapabilitiesCreateInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdCapabilitiesCreateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdCapabilitiesCreateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdCapabilitiesCreateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdCapabilitiesCreateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdCapabilitiesCreateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdCapabilitiesCreateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.BundleIdCapabilitiesCreateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.BundleIdCapabilitiesCreateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.BundleIdCapabilitiesCreateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.BundleIdCapabilitiesCreateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesCreateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesCreateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/post(bundleIdCapabilities_createInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdCapabilitiesCreateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdCapabilitiesCreateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)`.
    public enum BundleIdCapabilitiesUpdateInstance {
        public static let id: Swift.String = "bundleIdCapabilities_updateInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdCapabilitiesUpdateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdCapabilitiesUpdateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdCapabilitiesUpdateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdCapabilitiesUpdateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdCapabilityUpdateRequest)
            }
            public var body: Operations.BundleIdCapabilitiesUpdateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.BundleIdCapabilitiesUpdateInstance.Input.Path,
                headers: Operations.BundleIdCapabilitiesUpdateInstance.Input.Headers = .init(),
                body: Operations.BundleIdCapabilitiesUpdateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdCapabilityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdCapabilityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleIdCapability
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdCapabilitiesUpdateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdCapabilitiesUpdateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdCapabilitiesUpdateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdCapabilitiesUpdateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdCapabilitiesUpdateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdCapabilitiesUpdateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdCapabilitiesUpdateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdCapabilitiesUpdateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdCapabilitiesUpdateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdCapabilitiesUpdateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.BundleIdCapabilitiesUpdateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.BundleIdCapabilitiesUpdateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.BundleIdCapabilitiesUpdateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.BundleIdCapabilitiesUpdateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/PATCH/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesUpdateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesUpdateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/patch(bundleIdCapabilities_updateInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdCapabilitiesUpdateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdCapabilitiesUpdateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/bundleIdCapabilities/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)`.
    public enum BundleIdCapabilitiesDeleteInstance {
        public static let id: Swift.String = "bundleIdCapabilities_deleteInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdCapabilitiesDeleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdCapabilitiesDeleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdCapabilitiesDeleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdCapabilitiesDeleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.BundleIdCapabilitiesDeleteInstance.Input.Path,
                headers: Operations.BundleIdCapabilitiesDeleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.BundleIdCapabilitiesDeleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.BundleIdCapabilitiesDeleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesDeleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesDeleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdCapabilitiesDeleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdCapabilitiesDeleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesDeleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesDeleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdCapabilitiesDeleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdCapabilitiesDeleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesDeleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesDeleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdCapabilitiesDeleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdCapabilitiesDeleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesDeleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesDeleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdCapabilitiesDeleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdCapabilitiesDeleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesDeleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesDeleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.BundleIdCapabilitiesDeleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.BundleIdCapabilitiesDeleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIdCapabilities/{id}/DELETE/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdCapabilitiesDeleteInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdCapabilitiesDeleteInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIdCapabilities/{id}/delete(bundleIdCapabilities_deleteInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdCapabilitiesDeleteInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdCapabilitiesDeleteInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)`.
    public enum BundleIdsGetCollection {
        public static let id: Swift.String = "bundleIds_getCollection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query`.
            public struct Query: Sendable, Hashable {
                /// filter by attribute 'name'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[name]`.
                public var filter_lbrack_name_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/Filter_lbrack_platform_rbrack_Payload`.
                @frozen public enum FilterLbrackPlatformRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ios = "IOS"
                    case macOs = "MAC_OS"
                    case universal = "UNIVERSAL"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[platform]`.
                public typealias Filter_lbrack_platform_rbrack_Payload = [Operations.BundleIdsGetCollection.Input.Query.FilterLbrackPlatformRbrackPayloadPayload]
                /// filter by attribute 'platform'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[platform]`.
                public var filter_lbrack_platform_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Filter_lbrack_platform_rbrack_Payload?
                /// filter by attribute 'identifier'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[identifier]`.
                public var filter_lbrack_identifier_rbrack_: [Swift.String]?
                /// filter by attribute 'seedId'
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[seedId]`.
                public var filter_lbrack_seedId_rbrack_: [Swift.String]?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/filter[id]`.
                public var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/SortPayload`.
                @frozen public enum SortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _hyphen_name = "-name"
                    case platform = "platform"
                    case _hyphen_platform = "-platform"
                    case identifier = "identifier"
                    case _hyphen_identifier = "-identifier"
                    case seedId = "seedId"
                    case _hyphen_seedId = "-seedId"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/sort`.
                public typealias SortPayload = [Operations.BundleIdsGetCollection.Input.Query.SortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/sort`.
                public var sort: Operations.BundleIdsGetCollection.Input.Query.SortPayload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/Fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIds]`.
                public typealias Fields_lbrack_bundleIds_rbrack_Payload = [Operations.BundleIdsGetCollection.Input.Query.FieldsLbrackBundleIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIds]`.
                public var fields_lbrack_bundleIds_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/Fields_lbrack_profiles_rbrack_Payload`.
                @frozen public enum FieldsLbrackProfilesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[profiles]`.
                public typealias Fields_lbrack_profiles_rbrack_Payload = [Operations.BundleIdsGetCollection.Input.Query.FieldsLbrackProfilesRbrackPayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[profiles]`.
                public var fields_lbrack_profiles_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/Fields_lbrack_bundleIdCapabilities_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdCapabilitiesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case capabilityType = "capabilityType"
                    case settings = "settings"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIdCapabilities]`.
                public typealias Fields_lbrack_bundleIdCapabilities_rbrack_Payload = [Operations.BundleIdsGetCollection.Input.Query.FieldsLbrackBundleIdCapabilitiesRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIdCapabilities
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[bundleIdCapabilities]`.
                public var fields_lbrack_bundleIdCapabilities_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_bundleIdCapabilities_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/Fields_lbrack_apps_rbrack_Payload`.
                @frozen public enum FieldsLbrackAppsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case accessibilityUrl = "accessibilityUrl"
                    case name = "name"
                    case bundleId = "bundleId"
                    case sku = "sku"
                    case primaryLocale = "primaryLocale"
                    case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
                    case subscriptionStatusUrl = "subscriptionStatusUrl"
                    case subscriptionStatusUrlVersion = "subscriptionStatusUrlVersion"
                    case subscriptionStatusUrlForSandbox = "subscriptionStatusUrlForSandbox"
                    case subscriptionStatusUrlVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                    case contentRightsDeclaration = "contentRightsDeclaration"
                    case streamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
                    case accessibilityDeclarations = "accessibilityDeclarations"
                    case appEncryptionDeclarations = "appEncryptionDeclarations"
                    case ciProduct = "ciProduct"
                    case betaTesters = "betaTesters"
                    case betaGroups = "betaGroups"
                    case appStoreVersions = "appStoreVersions"
                    case preReleaseVersions = "preReleaseVersions"
                    case betaAppLocalizations = "betaAppLocalizations"
                    case builds = "builds"
                    case betaLicenseAgreement = "betaLicenseAgreement"
                    case betaAppReviewDetail = "betaAppReviewDetail"
                    case appInfos = "appInfos"
                    case appClips = "appClips"
                    case appPricePoints = "appPricePoints"
                    case endUserLicenseAgreement = "endUserLicenseAgreement"
                    case appPriceSchedule = "appPriceSchedule"
                    case appAvailabilityV2 = "appAvailabilityV2"
                    case inAppPurchases = "inAppPurchases"
                    case subscriptionGroups = "subscriptionGroups"
                    case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                    case perfPowerMetrics = "perfPowerMetrics"
                    case appCustomProductPages = "appCustomProductPages"
                    case inAppPurchasesV2 = "inAppPurchasesV2"
                    case promotedPurchases = "promotedPurchases"
                    case appEvents = "appEvents"
                    case reviewSubmissions = "reviewSubmissions"
                    case subscriptionGracePeriod = "subscriptionGracePeriod"
                    case customerReviews = "customerReviews"
                    case customerReviewSummarizations = "customerReviewSummarizations"
                    case gameCenterDetail = "gameCenterDetail"
                    case appStoreVersionExperimentsV2 = "appStoreVersionExperimentsV2"
                    case alternativeDistributionKey = "alternativeDistributionKey"
                    case analyticsReportRequests = "analyticsReportRequests"
                    case marketplaceSearchDetail = "marketplaceSearchDetail"
                    case backgroundAssets = "backgroundAssets"
                    case betaFeedbackScreenshotSubmissions = "betaFeedbackScreenshotSubmissions"
                    case betaFeedbackCrashSubmissions = "betaFeedbackCrashSubmissions"
                    case webhooks = "webhooks"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[apps]`.
                public typealias Fields_lbrack_apps_rbrack_Payload = [Operations.BundleIdsGetCollection.Input.Query.FieldsLbrackAppsRbrackPayloadPayload]
                /// the fields to include for returned resources of type apps
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/fields[apps]`.
                public var fields_lbrack_apps_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_apps_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/include`.
                public typealias IncludePayload = [Operations.BundleIdsGetCollection.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/include`.
                public var include: Operations.BundleIdsGetCollection.Input.Query.IncludePayload?
                /// maximum number of related bundleIdCapabilities returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/limit[bundleIdCapabilities]`.
                public var limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int?
                /// maximum number of related profiles returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/query/limit[profiles]`.
                public var limit_lbrack_profiles_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_name_rbrack_: filter by attribute 'name'
                ///   - filter_lbrack_platform_rbrack_: filter by attribute 'platform'
                ///   - filter_lbrack_identifier_rbrack_: filter by attribute 'identifier'
                ///   - filter_lbrack_seedId_rbrack_: filter by attribute 'seedId'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIdCapabilities_rbrack_: the fields to include for returned resources of type bundleIdCapabilities
                ///   - fields_lbrack_apps_rbrack_: the fields to include for returned resources of type apps
                ///   - limit: maximum resources per page
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_bundleIdCapabilities_rbrack_: maximum number of related bundleIdCapabilities returned (when they are included)
                ///   - limit_lbrack_profiles_rbrack_: maximum number of related profiles returned (when they are included)
                public init(
                    filter_lbrack_name_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_platform_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Filter_lbrack_platform_rbrack_Payload? = nil,
                    filter_lbrack_identifier_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_seedId_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.BundleIdsGetCollection.Input.Query.SortPayload? = nil,
                    fields_lbrack_bundleIds_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_profiles_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIdCapabilities_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_bundleIdCapabilities_rbrack_Payload? = nil,
                    fields_lbrack_apps_rbrack_: Operations.BundleIdsGetCollection.Input.Query.Fields_lbrack_apps_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil,
                    include: Operations.BundleIdsGetCollection.Input.Query.IncludePayload? = nil,
                    limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int? = nil,
                    limit_lbrack_profiles_rbrack_: Swift.Int? = nil
                ) {
                    self.filter_lbrack_name_rbrack_ = filter_lbrack_name_rbrack_
                    self.filter_lbrack_platform_rbrack_ = filter_lbrack_platform_rbrack_
                    self.filter_lbrack_identifier_rbrack_ = filter_lbrack_identifier_rbrack_
                    self.filter_lbrack_seedId_rbrack_ = filter_lbrack_seedId_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIdCapabilities_rbrack_ = fields_lbrack_bundleIdCapabilities_rbrack_
                    self.fields_lbrack_apps_rbrack_ = fields_lbrack_apps_rbrack_
                    self.limit = limit
                    self.include = include
                    self.limit_lbrack_bundleIdCapabilities_rbrack_ = limit_lbrack_bundleIdCapabilities_rbrack_
                    self.limit_lbrack_profiles_rbrack_ = limit_lbrack_profiles_rbrack_
                }
            }
            public var query: Operations.BundleIdsGetCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsGetCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsGetCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsGetCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.BundleIdsGetCollection.Input.Query = .init(),
                headers: Operations.BundleIdsGetCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of BundleIds
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsGetCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsGetCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsGetCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsGetCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsGetCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsGetCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsGetCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsGetCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetCollection.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetCollection.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/get(bundleIds_getCollection)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsGetCollection.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsGetCollection.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/bundleIds`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)`.
    public enum BundleIdsCreateInstance {
        public static let id: Swift.String = "bundleIds_createInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsCreateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsCreateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsCreateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIds/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdCreateRequest)
            }
            public var body: Operations.BundleIdsCreateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BundleIdsCreateInstance.Input.Headers = .init(),
                body: Operations.BundleIdsCreateInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.BundleIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single BundleId
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.BundleIdsCreateInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.BundleIdsCreateInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsCreateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsCreateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsCreateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsCreateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsCreateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsCreateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.BundleIdsCreateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.BundleIdsCreateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.BundleIdsCreateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.BundleIdsCreateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsCreateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsCreateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/post(bundleIds_createInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsCreateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsCreateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)`.
    public enum BundleIdsGetInstance {
        public static let id: Swift.String = "bundleIds_getInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsGetInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/Fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIds]`.
                public typealias Fields_lbrack_bundleIds_rbrack_Payload = [Operations.BundleIdsGetInstance.Input.Query.FieldsLbrackBundleIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIds]`.
                public var fields_lbrack_bundleIds_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/Fields_lbrack_profiles_rbrack_Payload`.
                @frozen public enum FieldsLbrackProfilesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[profiles]`.
                public typealias Fields_lbrack_profiles_rbrack_Payload = [Operations.BundleIdsGetInstance.Input.Query.FieldsLbrackProfilesRbrackPayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[profiles]`.
                public var fields_lbrack_profiles_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/Fields_lbrack_bundleIdCapabilities_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdCapabilitiesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case capabilityType = "capabilityType"
                    case settings = "settings"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIdCapabilities]`.
                public typealias Fields_lbrack_bundleIdCapabilities_rbrack_Payload = [Operations.BundleIdsGetInstance.Input.Query.FieldsLbrackBundleIdCapabilitiesRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIdCapabilities
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[bundleIdCapabilities]`.
                public var fields_lbrack_bundleIdCapabilities_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_bundleIdCapabilities_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/Fields_lbrack_apps_rbrack_Payload`.
                @frozen public enum FieldsLbrackAppsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case accessibilityUrl = "accessibilityUrl"
                    case name = "name"
                    case bundleId = "bundleId"
                    case sku = "sku"
                    case primaryLocale = "primaryLocale"
                    case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
                    case subscriptionStatusUrl = "subscriptionStatusUrl"
                    case subscriptionStatusUrlVersion = "subscriptionStatusUrlVersion"
                    case subscriptionStatusUrlForSandbox = "subscriptionStatusUrlForSandbox"
                    case subscriptionStatusUrlVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                    case contentRightsDeclaration = "contentRightsDeclaration"
                    case streamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
                    case accessibilityDeclarations = "accessibilityDeclarations"
                    case appEncryptionDeclarations = "appEncryptionDeclarations"
                    case ciProduct = "ciProduct"
                    case betaTesters = "betaTesters"
                    case betaGroups = "betaGroups"
                    case appStoreVersions = "appStoreVersions"
                    case preReleaseVersions = "preReleaseVersions"
                    case betaAppLocalizations = "betaAppLocalizations"
                    case builds = "builds"
                    case betaLicenseAgreement = "betaLicenseAgreement"
                    case betaAppReviewDetail = "betaAppReviewDetail"
                    case appInfos = "appInfos"
                    case appClips = "appClips"
                    case appPricePoints = "appPricePoints"
                    case endUserLicenseAgreement = "endUserLicenseAgreement"
                    case appPriceSchedule = "appPriceSchedule"
                    case appAvailabilityV2 = "appAvailabilityV2"
                    case inAppPurchases = "inAppPurchases"
                    case subscriptionGroups = "subscriptionGroups"
                    case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                    case perfPowerMetrics = "perfPowerMetrics"
                    case appCustomProductPages = "appCustomProductPages"
                    case inAppPurchasesV2 = "inAppPurchasesV2"
                    case promotedPurchases = "promotedPurchases"
                    case appEvents = "appEvents"
                    case reviewSubmissions = "reviewSubmissions"
                    case subscriptionGracePeriod = "subscriptionGracePeriod"
                    case customerReviews = "customerReviews"
                    case customerReviewSummarizations = "customerReviewSummarizations"
                    case gameCenterDetail = "gameCenterDetail"
                    case appStoreVersionExperimentsV2 = "appStoreVersionExperimentsV2"
                    case alternativeDistributionKey = "alternativeDistributionKey"
                    case analyticsReportRequests = "analyticsReportRequests"
                    case marketplaceSearchDetail = "marketplaceSearchDetail"
                    case backgroundAssets = "backgroundAssets"
                    case betaFeedbackScreenshotSubmissions = "betaFeedbackScreenshotSubmissions"
                    case betaFeedbackCrashSubmissions = "betaFeedbackCrashSubmissions"
                    case webhooks = "webhooks"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[apps]`.
                public typealias Fields_lbrack_apps_rbrack_Payload = [Operations.BundleIdsGetInstance.Input.Query.FieldsLbrackAppsRbrackPayloadPayload]
                /// the fields to include for returned resources of type apps
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/fields[apps]`.
                public var fields_lbrack_apps_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_apps_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/include`.
                public typealias IncludePayload = [Operations.BundleIdsGetInstance.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/include`.
                public var include: Operations.BundleIdsGetInstance.Input.Query.IncludePayload?
                /// maximum number of related bundleIdCapabilities returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/limit[bundleIdCapabilities]`.
                public var limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int?
                /// maximum number of related profiles returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/query/limit[profiles]`.
                public var limit_lbrack_profiles_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIdCapabilities_rbrack_: the fields to include for returned resources of type bundleIdCapabilities
                ///   - fields_lbrack_apps_rbrack_: the fields to include for returned resources of type apps
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_bundleIdCapabilities_rbrack_: maximum number of related bundleIdCapabilities returned (when they are included)
                ///   - limit_lbrack_profiles_rbrack_: maximum number of related profiles returned (when they are included)
                public init(
                    fields_lbrack_bundleIds_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_profiles_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIdCapabilities_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_bundleIdCapabilities_rbrack_Payload? = nil,
                    fields_lbrack_apps_rbrack_: Operations.BundleIdsGetInstance.Input.Query.Fields_lbrack_apps_rbrack_Payload? = nil,
                    include: Operations.BundleIdsGetInstance.Input.Query.IncludePayload? = nil,
                    limit_lbrack_bundleIdCapabilities_rbrack_: Swift.Int? = nil,
                    limit_lbrack_profiles_rbrack_: Swift.Int? = nil
                ) {
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIdCapabilities_rbrack_ = fields_lbrack_bundleIdCapabilities_rbrack_
                    self.fields_lbrack_apps_rbrack_ = fields_lbrack_apps_rbrack_
                    self.include = include
                    self.limit_lbrack_bundleIdCapabilities_rbrack_ = limit_lbrack_bundleIdCapabilities_rbrack_
                    self.limit_lbrack_profiles_rbrack_ = limit_lbrack_profiles_rbrack_
                }
            }
            public var query: Operations.BundleIdsGetInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsGetInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsGetInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsGetInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.BundleIdsGetInstance.Input.Path,
                query: Operations.BundleIdsGetInstance.Input.Query = .init(),
                headers: Operations.BundleIdsGetInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleId
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsGetInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsGetInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsGetInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsGetInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsGetInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsGetInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsGetInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsGetInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsGetInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsGetInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsGetInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsGetInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/get(bundleIds_getInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsGetInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsGetInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)`.
    public enum BundleIdsUpdateInstance {
        public static let id: Swift.String = "bundleIds_updateInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsUpdateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsUpdateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsUpdateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsUpdateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.BundleIdUpdateRequest)
            }
            public var body: Operations.BundleIdsUpdateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.BundleIdsUpdateInstance.Input.Path,
                headers: Operations.BundleIdsUpdateInstance.Input.Headers = .init(),
                body: Operations.BundleIdsUpdateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleId
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsUpdateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsUpdateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsUpdateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsUpdateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsUpdateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsUpdateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsUpdateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsUpdateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsUpdateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsUpdateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.BundleIdsUpdateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.BundleIdsUpdateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.BundleIdsUpdateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.BundleIdsUpdateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/PATCH/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsUpdateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsUpdateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/patch(bundleIds_updateInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsUpdateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsUpdateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/bundleIds/{id}`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)`.
    public enum BundleIdsDeleteInstance {
        public static let id: Swift.String = "bundleIds_deleteInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsDeleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsDeleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsDeleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsDeleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.BundleIdsDeleteInstance.Input.Path,
                headers: Operations.BundleIdsDeleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.BundleIdsDeleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.BundleIdsDeleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsDeleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsDeleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsDeleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsDeleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsDeleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsDeleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsDeleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsDeleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsDeleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsDeleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsDeleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsDeleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsDeleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsDeleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsDeleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsDeleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsDeleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsDeleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.BundleIdsDeleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.BundleIdsDeleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/DELETE/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsDeleteInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsDeleteInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/delete(bundleIds_deleteInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsDeleteInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsDeleteInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)`.
    public enum CertificatesGetCollection {
        public static let id: Swift.String = "certificates_getCollection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/GET/query`.
            public struct Query: Sendable, Hashable {
                /// filter by attribute 'displayName'
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[displayName]`.
                public var filter_lbrack_displayName_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/Filter_lbrack_certificateType_rbrack_Payload`.
                @frozen public enum FilterLbrackCertificateTypeRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case applePay = "APPLE_PAY"
                    case applePayMerchantIdentity = "APPLE_PAY_MERCHANT_IDENTITY"
                    case applePayPspIdentity = "APPLE_PAY_PSP_IDENTITY"
                    case applePayRsa = "APPLE_PAY_RSA"
                    case developerIdKext = "DEVELOPER_ID_KEXT"
                    case developerIdKextG2 = "DEVELOPER_ID_KEXT_G2"
                    case developerIdApplication = "DEVELOPER_ID_APPLICATION"
                    case developerIdApplicationG2 = "DEVELOPER_ID_APPLICATION_G2"
                    case development = "DEVELOPMENT"
                    case distribution = "DISTRIBUTION"
                    case identityAccess = "IDENTITY_ACCESS"
                    case iosDevelopment = "IOS_DEVELOPMENT"
                    case iosDistribution = "IOS_DISTRIBUTION"
                    case macAppDistribution = "MAC_APP_DISTRIBUTION"
                    case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
                    case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                    case passTypeId = "PASS_TYPE_ID"
                    case passTypeIdWithNfc = "PASS_TYPE_ID_WITH_NFC"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[certificateType]`.
                public typealias Filter_lbrack_certificateType_rbrack_Payload = [Operations.CertificatesGetCollection.Input.Query.FilterLbrackCertificateTypeRbrackPayloadPayload]
                /// filter by attribute 'certificateType'
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[certificateType]`.
                public var filter_lbrack_certificateType_rbrack_: Operations.CertificatesGetCollection.Input.Query.Filter_lbrack_certificateType_rbrack_Payload?
                /// filter by attribute 'serialNumber'
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[serialNumber]`.
                public var filter_lbrack_serialNumber_rbrack_: [Swift.String]?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/filter[id]`.
                public var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/SortPayload`.
                @frozen public enum SortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case displayName = "displayName"
                    case _hyphen_displayName = "-displayName"
                    case certificateType = "certificateType"
                    case _hyphen_certificateType = "-certificateType"
                    case serialNumber = "serialNumber"
                    case _hyphen_serialNumber = "-serialNumber"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/sort`.
                public typealias SortPayload = [Operations.CertificatesGetCollection.Input.Query.SortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/sort`.
                public var sort: Operations.CertificatesGetCollection.Input.Query.SortPayload?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/Fields_lbrack_certificates_rbrack_Payload`.
                @frozen public enum FieldsLbrackCertificatesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                    case activated = "activated"
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields[certificates]`.
                public typealias Fields_lbrack_certificates_rbrack_Payload = [Operations.CertificatesGetCollection.Input.Query.FieldsLbrackCertificatesRbrackPayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields[certificates]`.
                public var fields_lbrack_certificates_rbrack_: Operations.CertificatesGetCollection.Input.Query.Fields_lbrack_certificates_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/Fields_lbrack_passTypeIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackPassTypeIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case identifier = "identifier"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields[passTypeIds]`.
                public typealias Fields_lbrack_passTypeIds_rbrack_Payload = [Operations.CertificatesGetCollection.Input.Query.FieldsLbrackPassTypeIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type passTypeIds
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/fields[passTypeIds]`.
                public var fields_lbrack_passTypeIds_rbrack_: Operations.CertificatesGetCollection.Input.Query.Fields_lbrack_passTypeIds_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/include`.
                public typealias IncludePayload = [Operations.CertificatesGetCollection.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/GET/query/include`.
                public var include: Operations.CertificatesGetCollection.Input.Query.IncludePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_displayName_rbrack_: filter by attribute 'displayName'
                ///   - filter_lbrack_certificateType_rbrack_: filter by attribute 'certificateType'
                ///   - filter_lbrack_serialNumber_rbrack_: filter by attribute 'serialNumber'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - fields_lbrack_passTypeIds_rbrack_: the fields to include for returned resources of type passTypeIds
                ///   - limit: maximum resources per page
                ///   - include: comma-separated list of relationships to include
                public init(
                    filter_lbrack_displayName_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_certificateType_rbrack_: Operations.CertificatesGetCollection.Input.Query.Filter_lbrack_certificateType_rbrack_Payload? = nil,
                    filter_lbrack_serialNumber_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.CertificatesGetCollection.Input.Query.SortPayload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.CertificatesGetCollection.Input.Query.Fields_lbrack_certificates_rbrack_Payload? = nil,
                    fields_lbrack_passTypeIds_rbrack_: Operations.CertificatesGetCollection.Input.Query.Fields_lbrack_passTypeIds_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil,
                    include: Operations.CertificatesGetCollection.Input.Query.IncludePayload? = nil
                ) {
                    self.filter_lbrack_displayName_rbrack_ = filter_lbrack_displayName_rbrack_
                    self.filter_lbrack_certificateType_rbrack_ = filter_lbrack_certificateType_rbrack_
                    self.filter_lbrack_serialNumber_rbrack_ = filter_lbrack_serialNumber_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.fields_lbrack_passTypeIds_rbrack_ = fields_lbrack_passTypeIds_rbrack_
                    self.limit = limit
                    self.include = include
                }
            }
            public var query: Operations.CertificatesGetCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/certificates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesGetCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesGetCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesGetCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.CertificatesGetCollection.Input.Query = .init(),
                headers: Operations.CertificatesGetCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificatesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CertificatesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Certificates
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CertificatesGetCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CertificatesGetCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesGetCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesGetCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesGetCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesGetCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesGetCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesGetCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetCollection.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetCollection.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/get(certificates_getCollection)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesGetCollection.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesGetCollection.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/certificates`.
    /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)`.
    public enum CertificatesCreateInstance {
        public static let id: Swift.String = "certificates_createInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesCreateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesCreateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesCreateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/certificates/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CertificateCreateRequest)
            }
            public var body: Operations.CertificatesCreateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CertificatesCreateInstance.Input.Headers = .init(),
                body: Operations.CertificatesCreateInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CertificateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CertificateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single Certificate
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.CertificatesCreateInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.CertificatesCreateInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesCreateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesCreateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesCreateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesCreateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesCreateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesCreateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.CertificatesCreateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.CertificatesCreateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.CertificatesCreateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.CertificatesCreateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesCreateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesCreateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/post(certificates_createInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesCreateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesCreateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)`.
    public enum CertificatesGetInstance {
        public static let id: Swift.String = "certificates_getInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.CertificatesGetInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/Fields_lbrack_certificates_rbrack_Payload`.
                @frozen public enum FieldsLbrackCertificatesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                    case activated = "activated"
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields[certificates]`.
                public typealias Fields_lbrack_certificates_rbrack_Payload = [Operations.CertificatesGetInstance.Input.Query.FieldsLbrackCertificatesRbrackPayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields[certificates]`.
                public var fields_lbrack_certificates_rbrack_: Operations.CertificatesGetInstance.Input.Query.Fields_lbrack_certificates_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/Fields_lbrack_passTypeIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackPassTypeIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case identifier = "identifier"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields[passTypeIds]`.
                public typealias Fields_lbrack_passTypeIds_rbrack_Payload = [Operations.CertificatesGetInstance.Input.Query.FieldsLbrackPassTypeIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type passTypeIds
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/fields[passTypeIds]`.
                public var fields_lbrack_passTypeIds_rbrack_: Operations.CertificatesGetInstance.Input.Query.Fields_lbrack_passTypeIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/include`.
                public typealias IncludePayload = [Operations.CertificatesGetInstance.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/query/include`.
                public var include: Operations.CertificatesGetInstance.Input.Query.IncludePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - fields_lbrack_passTypeIds_rbrack_: the fields to include for returned resources of type passTypeIds
                ///   - include: comma-separated list of relationships to include
                public init(
                    fields_lbrack_certificates_rbrack_: Operations.CertificatesGetInstance.Input.Query.Fields_lbrack_certificates_rbrack_Payload? = nil,
                    fields_lbrack_passTypeIds_rbrack_: Operations.CertificatesGetInstance.Input.Query.Fields_lbrack_passTypeIds_rbrack_Payload? = nil,
                    include: Operations.CertificatesGetInstance.Input.Query.IncludePayload? = nil
                ) {
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.fields_lbrack_passTypeIds_rbrack_ = fields_lbrack_passTypeIds_rbrack_
                    self.include = include
                }
            }
            public var query: Operations.CertificatesGetInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesGetInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesGetInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesGetInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.CertificatesGetInstance.Input.Path,
                query: Operations.CertificatesGetInstance.Input.Query = .init(),
                headers: Operations.CertificatesGetInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CertificateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Certificate
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CertificatesGetInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CertificatesGetInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesGetInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesGetInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesGetInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesGetInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesGetInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesGetInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CertificatesGetInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CertificatesGetInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesGetInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesGetInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/get(certificates_getInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesGetInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesGetInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)`.
    public enum CertificatesUpdateInstance {
        public static let id: Swift.String = "certificates_updateInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.CertificatesUpdateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesUpdateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesUpdateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesUpdateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.CertificateUpdateRequest)
            }
            public var body: Operations.CertificatesUpdateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CertificatesUpdateInstance.Input.Path,
                headers: Operations.CertificatesUpdateInstance.Input.Headers = .init(),
                body: Operations.CertificatesUpdateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CertificateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Certificate
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CertificatesUpdateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CertificatesUpdateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesUpdateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesUpdateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesUpdateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesUpdateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesUpdateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesUpdateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CertificatesUpdateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CertificatesUpdateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.CertificatesUpdateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.CertificatesUpdateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.CertificatesUpdateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.CertificatesUpdateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/PATCH/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesUpdateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesUpdateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/patch(certificates_updateInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesUpdateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesUpdateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/certificates/{id}`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)`.
    public enum CertificatesDeleteInstance {
        public static let id: Swift.String = "certificates_deleteInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.CertificatesDeleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesDeleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesDeleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesDeleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CertificatesDeleteInstance.Input.Path,
                headers: Operations.CertificatesDeleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.CertificatesDeleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.CertificatesDeleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesDeleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesDeleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesDeleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesDeleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesDeleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesDeleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesDeleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesDeleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesDeleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesDeleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesDeleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesDeleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesDeleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesDeleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CertificatesDeleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CertificatesDeleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesDeleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesDeleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.CertificatesDeleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.CertificatesDeleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/DELETE/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesDeleteInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesDeleteInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/delete(certificates_deleteInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesDeleteInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesDeleteInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)`.
    public enum DevicesGetCollection {
        public static let id: Swift.String = "devices_getCollection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/GET/query`.
            public struct Query: Sendable, Hashable {
                /// filter by attribute 'name'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[name]`.
                public var filter_lbrack_name_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/Filter_lbrack_platform_rbrack_Payload`.
                @frozen public enum FilterLbrackPlatformRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ios = "IOS"
                    case macOs = "MAC_OS"
                    case universal = "UNIVERSAL"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[platform]`.
                public typealias Filter_lbrack_platform_rbrack_Payload = [Operations.DevicesGetCollection.Input.Query.FilterLbrackPlatformRbrackPayloadPayload]
                /// filter by attribute 'platform'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[platform]`.
                public var filter_lbrack_platform_rbrack_: Operations.DevicesGetCollection.Input.Query.Filter_lbrack_platform_rbrack_Payload?
                /// filter by attribute 'udid'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[udid]`.
                public var filter_lbrack_udid_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/Filter_lbrack_status_rbrack_Payload`.
                @frozen public enum FilterLbrackStatusRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "ENABLED"
                    case disabled = "DISABLED"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[status]`.
                public typealias Filter_lbrack_status_rbrack_Payload = [Operations.DevicesGetCollection.Input.Query.FilterLbrackStatusRbrackPayloadPayload]
                /// filter by attribute 'status'
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[status]`.
                public var filter_lbrack_status_rbrack_: Operations.DevicesGetCollection.Input.Query.Filter_lbrack_status_rbrack_Payload?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/filter[id]`.
                public var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/SortPayload`.
                @frozen public enum SortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _hyphen_name = "-name"
                    case platform = "platform"
                    case _hyphen_platform = "-platform"
                    case udid = "udid"
                    case _hyphen_udid = "-udid"
                    case status = "status"
                    case _hyphen_status = "-status"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/sort`.
                public typealias SortPayload = [Operations.DevicesGetCollection.Input.Query.SortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/sort`.
                public var sort: Operations.DevicesGetCollection.Input.Query.SortPayload?
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/Fields_lbrack_devices_rbrack_Payload`.
                @frozen public enum FieldsLbrackDevicesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/fields[devices]`.
                public typealias Fields_lbrack_devices_rbrack_Payload = [Operations.DevicesGetCollection.Input.Query.FieldsLbrackDevicesRbrackPayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/fields[devices]`.
                public var fields_lbrack_devices_rbrack_: Operations.DevicesGetCollection.Input.Query.Fields_lbrack_devices_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/devices/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_name_rbrack_: filter by attribute 'name'
                ///   - filter_lbrack_platform_rbrack_: filter by attribute 'platform'
                ///   - filter_lbrack_udid_rbrack_: filter by attribute 'udid'
                ///   - filter_lbrack_status_rbrack_: filter by attribute 'status'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - limit: maximum resources per page
                public init(
                    filter_lbrack_name_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_platform_rbrack_: Operations.DevicesGetCollection.Input.Query.Filter_lbrack_platform_rbrack_Payload? = nil,
                    filter_lbrack_udid_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_status_rbrack_: Operations.DevicesGetCollection.Input.Query.Filter_lbrack_status_rbrack_Payload? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.DevicesGetCollection.Input.Query.SortPayload? = nil,
                    fields_lbrack_devices_rbrack_: Operations.DevicesGetCollection.Input.Query.Fields_lbrack_devices_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.filter_lbrack_name_rbrack_ = filter_lbrack_name_rbrack_
                    self.filter_lbrack_platform_rbrack_ = filter_lbrack_platform_rbrack_
                    self.filter_lbrack_udid_rbrack_ = filter_lbrack_udid_rbrack_
                    self.filter_lbrack_status_rbrack_ = filter_lbrack_status_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.limit = limit
                }
            }
            public var query: Operations.DevicesGetCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/devices/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesGetCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesGetCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DevicesGetCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.DevicesGetCollection.Input.Query = .init(),
                headers: Operations.DevicesGetCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DevicesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DevicesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Devices
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DevicesGetCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DevicesGetCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.DevicesGetCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.DevicesGetCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DevicesGetCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DevicesGetCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.DevicesGetCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.DevicesGetCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetCollection.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetCollection.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/get(devices_getCollection)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.DevicesGetCollection.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.DevicesGetCollection.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/devices`.
    /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)`.
    public enum DevicesCreateInstance {
        public static let id: Swift.String = "devices_createInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesCreateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesCreateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DevicesCreateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/devices/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DeviceCreateRequest)
            }
            public var body: Operations.DevicesCreateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DevicesCreateInstance.Input.Headers = .init(),
                body: Operations.DevicesCreateInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.DeviceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeviceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single Device
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.DevicesCreateInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.DevicesCreateInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.DevicesCreateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.DevicesCreateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DevicesCreateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DevicesCreateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.DevicesCreateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.DevicesCreateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.DevicesCreateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.DevicesCreateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.DevicesCreateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.DevicesCreateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesCreateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesCreateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/post(devices_createInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.DevicesCreateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.DevicesCreateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)`.
    public enum DevicesGetInstance {
        public static let id: Swift.String = "devices_getInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.DevicesGetInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query/Fields_lbrack_devices_rbrack_Payload`.
                @frozen public enum FieldsLbrackDevicesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query/fields[devices]`.
                public typealias Fields_lbrack_devices_rbrack_Payload = [Operations.DevicesGetInstance.Input.Query.FieldsLbrackDevicesRbrackPayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/query/fields[devices]`.
                public var fields_lbrack_devices_rbrack_: Operations.DevicesGetInstance.Input.Query.Fields_lbrack_devices_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                public init(fields_lbrack_devices_rbrack_: Operations.DevicesGetInstance.Input.Query.Fields_lbrack_devices_rbrack_Payload? = nil) {
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                }
            }
            public var query: Operations.DevicesGetInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesGetInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesGetInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DevicesGetInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.DevicesGetInstance.Input.Path,
                query: Operations.DevicesGetInstance.Input.Query = .init(),
                headers: Operations.DevicesGetInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeviceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeviceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Device
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DevicesGetInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DevicesGetInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.DevicesGetInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.DevicesGetInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DevicesGetInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DevicesGetInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.DevicesGetInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.DevicesGetInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DevicesGetInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DevicesGetInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesGetInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesGetInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/get(devices_getInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.DevicesGetInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.DevicesGetInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PATCH /v1/devices/{id}`.
    /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)`.
    public enum DevicesUpdateInstance {
        public static let id: Swift.String = "devices_updateInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.DevicesUpdateInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesUpdateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DevicesUpdateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DevicesUpdateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.DeviceUpdateRequest)
            }
            public var body: Operations.DevicesUpdateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.DevicesUpdateInstance.Input.Path,
                headers: Operations.DevicesUpdateInstance.Input.Headers = .init(),
                body: Operations.DevicesUpdateInstance.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeviceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeviceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Device
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DevicesUpdateInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DevicesUpdateInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.DevicesUpdateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.DevicesUpdateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DevicesUpdateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DevicesUpdateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.DevicesUpdateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.DevicesUpdateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DevicesUpdateInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DevicesUpdateInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.DevicesUpdateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.DevicesUpdateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.DevicesUpdateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.DevicesUpdateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/devices/{id}/PATCH/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DevicesUpdateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DevicesUpdateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/devices/{id}/patch(devices_updateInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.DevicesUpdateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.DevicesUpdateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)`.
    public enum ProfilesGetCollection {
        public static let id: Swift.String = "profiles_getCollection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/GET/query`.
            public struct Query: Sendable, Hashable {
                /// filter by attribute 'name'
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[name]`.
                public var filter_lbrack_name_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/Filter_lbrack_profileType_rbrack_Payload`.
                @frozen public enum FilterLbrackProfileTypeRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
                    case iosAppStore = "IOS_APP_STORE"
                    case iosAppAdhoc = "IOS_APP_ADHOC"
                    case iosAppInhouse = "IOS_APP_INHOUSE"
                    case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                    case macAppStore = "MAC_APP_STORE"
                    case macAppDirect = "MAC_APP_DIRECT"
                    case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
                    case tvosAppStore = "TVOS_APP_STORE"
                    case tvosAppAdhoc = "TVOS_APP_ADHOC"
                    case tvosAppInhouse = "TVOS_APP_INHOUSE"
                    case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
                    case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
                    case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileType]`.
                public typealias Filter_lbrack_profileType_rbrack_Payload = [Operations.ProfilesGetCollection.Input.Query.FilterLbrackProfileTypeRbrackPayloadPayload]
                /// filter by attribute 'profileType'
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileType]`.
                public var filter_lbrack_profileType_rbrack_: Operations.ProfilesGetCollection.Input.Query.Filter_lbrack_profileType_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/Filter_lbrack_profileState_rbrack_Payload`.
                @frozen public enum FilterLbrackProfileStateRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case active = "ACTIVE"
                    case invalid = "INVALID"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileState]`.
                public typealias Filter_lbrack_profileState_rbrack_Payload = [Operations.ProfilesGetCollection.Input.Query.FilterLbrackProfileStateRbrackPayloadPayload]
                /// filter by attribute 'profileState'
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[profileState]`.
                public var filter_lbrack_profileState_rbrack_: Operations.ProfilesGetCollection.Input.Query.Filter_lbrack_profileState_rbrack_Payload?
                /// filter by id(s)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/filter[id]`.
                public var filter_lbrack_id_rbrack_: [Swift.String]?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/SortPayload`.
                @frozen public enum SortPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _hyphen_name = "-name"
                    case profileType = "profileType"
                    case _hyphen_profileType = "-profileType"
                    case profileState = "profileState"
                    case _hyphen_profileState = "-profileState"
                    case id = "id"
                    case _hyphen_id = "-id"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/sort`.
                public typealias SortPayload = [Operations.ProfilesGetCollection.Input.Query.SortPayloadPayload]
                /// comma-separated list of sort expressions; resources will be sorted as specified
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/sort`.
                public var sort: Operations.ProfilesGetCollection.Input.Query.SortPayload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/Fields_lbrack_profiles_rbrack_Payload`.
                @frozen public enum FieldsLbrackProfilesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[profiles]`.
                public typealias Fields_lbrack_profiles_rbrack_Payload = [Operations.ProfilesGetCollection.Input.Query.FieldsLbrackProfilesRbrackPayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[profiles]`.
                public var fields_lbrack_profiles_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/Fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[bundleIds]`.
                public typealias Fields_lbrack_bundleIds_rbrack_Payload = [Operations.ProfilesGetCollection.Input.Query.FieldsLbrackBundleIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[bundleIds]`.
                public var fields_lbrack_bundleIds_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/Fields_lbrack_devices_rbrack_Payload`.
                @frozen public enum FieldsLbrackDevicesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[devices]`.
                public typealias Fields_lbrack_devices_rbrack_Payload = [Operations.ProfilesGetCollection.Input.Query.FieldsLbrackDevicesRbrackPayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[devices]`.
                public var fields_lbrack_devices_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_devices_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/Fields_lbrack_certificates_rbrack_Payload`.
                @frozen public enum FieldsLbrackCertificatesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                    case activated = "activated"
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[certificates]`.
                public typealias Fields_lbrack_certificates_rbrack_Payload = [Operations.ProfilesGetCollection.Input.Query.FieldsLbrackCertificatesRbrackPayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/fields[certificates]`.
                public var fields_lbrack_certificates_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_certificates_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/include`.
                public typealias IncludePayload = [Operations.ProfilesGetCollection.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/include`.
                public var include: Operations.ProfilesGetCollection.Input.Query.IncludePayload?
                /// maximum number of related certificates returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/limit[certificates]`.
                public var limit_lbrack_certificates_rbrack_: Swift.Int?
                /// maximum number of related devices returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/GET/query/limit[devices]`.
                public var limit_lbrack_devices_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter_lbrack_name_rbrack_: filter by attribute 'name'
                ///   - filter_lbrack_profileType_rbrack_: filter by attribute 'profileType'
                ///   - filter_lbrack_profileState_rbrack_: filter by attribute 'profileState'
                ///   - filter_lbrack_id_rbrack_: filter by id(s)
                ///   - sort: comma-separated list of sort expressions; resources will be sorted as specified
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - limit: maximum resources per page
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_certificates_rbrack_: maximum number of related certificates returned (when they are included)
                ///   - limit_lbrack_devices_rbrack_: maximum number of related devices returned (when they are included)
                public init(
                    filter_lbrack_name_rbrack_: [Swift.String]? = nil,
                    filter_lbrack_profileType_rbrack_: Operations.ProfilesGetCollection.Input.Query.Filter_lbrack_profileType_rbrack_Payload? = nil,
                    filter_lbrack_profileState_rbrack_: Operations.ProfilesGetCollection.Input.Query.Filter_lbrack_profileState_rbrack_Payload? = nil,
                    filter_lbrack_id_rbrack_: [Swift.String]? = nil,
                    sort: Operations.ProfilesGetCollection.Input.Query.SortPayload? = nil,
                    fields_lbrack_profiles_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIds_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_devices_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_devices_rbrack_Payload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.ProfilesGetCollection.Input.Query.Fields_lbrack_certificates_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil,
                    include: Operations.ProfilesGetCollection.Input.Query.IncludePayload? = nil,
                    limit_lbrack_certificates_rbrack_: Swift.Int? = nil,
                    limit_lbrack_devices_rbrack_: Swift.Int? = nil
                ) {
                    self.filter_lbrack_name_rbrack_ = filter_lbrack_name_rbrack_
                    self.filter_lbrack_profileType_rbrack_ = filter_lbrack_profileType_rbrack_
                    self.filter_lbrack_profileState_rbrack_ = filter_lbrack_profileState_rbrack_
                    self.filter_lbrack_id_rbrack_ = filter_lbrack_id_rbrack_
                    self.sort = sort
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.limit = limit
                    self.include = include
                    self.limit_lbrack_certificates_rbrack_ = limit_lbrack_certificates_rbrack_
                    self.limit_lbrack_devices_rbrack_ = limit_lbrack_devices_rbrack_
                }
            }
            public var query: Operations.ProfilesGetCollection.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesGetCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesGetCollection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesGetCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ProfilesGetCollection.Input.Query = .init(),
                headers: Operations.ProfilesGetCollection.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetCollection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Profiles
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesGetCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesGetCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetCollection.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetCollection.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesGetCollection.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesGetCollection.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetCollection.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetCollection.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesGetCollection.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesGetCollection.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetCollection.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetCollection.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesGetCollection.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesGetCollection.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetCollection.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetCollection.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/get(profiles_getCollection)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesGetCollection.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesGetCollection.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /v1/profiles`.
    /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)`.
    public enum ProfilesCreateInstance {
        public static let id: Swift.String = "profiles_createInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesCreateInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesCreateInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesCreateInstance.Input.Headers
            /// - Remark: Generated from `#/paths/v1/profiles/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProfileCreateRequest)
            }
            public var body: Operations.ProfilesCreateInstance.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ProfilesCreateInstance.Input.Headers = .init(),
                body: Operations.ProfilesCreateInstance.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ProfileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Single Profile
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProfilesCreateInstance.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.ProfilesCreateInstance.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesCreateInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesCreateInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesCreateInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesCreateInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesCreateInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesCreateInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ProfilesCreateInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.ProfilesCreateInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.ProfilesCreateInstance.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.ProfilesCreateInstance.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCreateInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCreateInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/post(profiles_createInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesCreateInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesCreateInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)`.
    public enum ProfilesGetInstance {
        public static let id: Swift.String = "profiles_getInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesGetInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/Fields_lbrack_profiles_rbrack_Payload`.
                @frozen public enum FieldsLbrackProfilesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[profiles]`.
                public typealias Fields_lbrack_profiles_rbrack_Payload = [Operations.ProfilesGetInstance.Input.Query.FieldsLbrackProfilesRbrackPayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[profiles]`.
                public var fields_lbrack_profiles_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_profiles_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/Fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[bundleIds]`.
                public typealias Fields_lbrack_bundleIds_rbrack_Payload = [Operations.ProfilesGetInstance.Input.Query.FieldsLbrackBundleIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[bundleIds]`.
                public var fields_lbrack_bundleIds_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/Fields_lbrack_devices_rbrack_Payload`.
                @frozen public enum FieldsLbrackDevicesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[devices]`.
                public typealias Fields_lbrack_devices_rbrack_Payload = [Operations.ProfilesGetInstance.Input.Query.FieldsLbrackDevicesRbrackPayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[devices]`.
                public var fields_lbrack_devices_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_devices_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/Fields_lbrack_certificates_rbrack_Payload`.
                @frozen public enum FieldsLbrackCertificatesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                    case activated = "activated"
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[certificates]`.
                public typealias Fields_lbrack_certificates_rbrack_Payload = [Operations.ProfilesGetInstance.Input.Query.FieldsLbrackCertificatesRbrackPayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/fields[certificates]`.
                public var fields_lbrack_certificates_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_certificates_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/include`.
                public typealias IncludePayload = [Operations.ProfilesGetInstance.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/include`.
                public var include: Operations.ProfilesGetInstance.Input.Query.IncludePayload?
                /// maximum number of related certificates returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/limit[certificates]`.
                public var limit_lbrack_certificates_rbrack_: Swift.Int?
                /// maximum number of related devices returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/query/limit[devices]`.
                public var limit_lbrack_devices_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_certificates_rbrack_: maximum number of related certificates returned (when they are included)
                ///   - limit_lbrack_devices_rbrack_: maximum number of related devices returned (when they are included)
                public init(
                    fields_lbrack_profiles_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_profiles_rbrack_Payload? = nil,
                    fields_lbrack_bundleIds_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload? = nil,
                    fields_lbrack_devices_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_devices_rbrack_Payload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.ProfilesGetInstance.Input.Query.Fields_lbrack_certificates_rbrack_Payload? = nil,
                    include: Operations.ProfilesGetInstance.Input.Query.IncludePayload? = nil,
                    limit_lbrack_certificates_rbrack_: Swift.Int? = nil,
                    limit_lbrack_devices_rbrack_: Swift.Int? = nil
                ) {
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.include = include
                    self.limit_lbrack_certificates_rbrack_ = limit_lbrack_certificates_rbrack_
                    self.limit_lbrack_devices_rbrack_ = limit_lbrack_devices_rbrack_
                }
            }
            public var query: Operations.ProfilesGetInstance.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesGetInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesGetInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesGetInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ProfilesGetInstance.Input.Path,
                query: Operations.ProfilesGetInstance.Input.Query = .init(),
                headers: Operations.ProfilesGetInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetInstance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetInstance.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single Profile
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesGetInstance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesGetInstance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesGetInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesGetInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesGetInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesGetInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesGetInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesGetInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesGetInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesGetInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesGetInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesGetInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/get(profiles_getInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesGetInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesGetInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /v1/profiles/{id}`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)`.
    public enum ProfilesDeleteInstance {
        public static let id: Swift.String = "profiles_deleteInstance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesDeleteInstance.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesDeleteInstance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesDeleteInstance.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesDeleteInstance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.ProfilesDeleteInstance.Input.Path,
                headers: Operations.ProfilesDeleteInstance.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProfilesDeleteInstance.Output.NoContent)
            /// Success (no content)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.ProfilesDeleteInstance.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDeleteInstance.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDeleteInstance.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesDeleteInstance.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesDeleteInstance.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDeleteInstance.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDeleteInstance.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesDeleteInstance.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesDeleteInstance.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDeleteInstance.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDeleteInstance.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesDeleteInstance.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesDeleteInstance.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDeleteInstance.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDeleteInstance.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesDeleteInstance.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesDeleteInstance.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDeleteInstance.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDeleteInstance.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Request entity error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ProfilesDeleteInstance.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.ProfilesDeleteInstance.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/DELETE/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDeleteInstance.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDeleteInstance.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/delete(profiles_deleteInstance)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesDeleteInstance.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesDeleteInstance.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)`.
    public enum BundleIdsAppGetToOneRelationship {
        public static let id: Swift.String = "bundleIds_app_getToOneRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsAppGetToOneRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsAppGetToOneRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsAppGetToOneRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsAppGetToOneRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.BundleIdsAppGetToOneRelationship.Input.Path,
                headers: Operations.BundleIdsAppGetToOneRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdAppLinkageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdAppLinkageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Related linkage
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsAppGetToOneRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsAppGetToOneRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsAppGetToOneRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsAppGetToOneRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsAppGetToOneRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsAppGetToOneRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsAppGetToOneRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsAppGetToOneRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsAppGetToOneRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsAppGetToOneRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/app/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/app/get(bundleIds_app_getToOneRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsAppGetToOneRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsAppGetToOneRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/app`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)`.
    public enum BundleIdsAppGetToOneRelated {
        public static let id: Swift.String = "bundleIds_app_getToOneRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsAppGetToOneRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query/Fields_lbrack_apps_rbrack_Payload`.
                @frozen public enum FieldsLbrackAppsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case accessibilityUrl = "accessibilityUrl"
                    case name = "name"
                    case bundleId = "bundleId"
                    case sku = "sku"
                    case primaryLocale = "primaryLocale"
                    case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
                    case subscriptionStatusUrl = "subscriptionStatusUrl"
                    case subscriptionStatusUrlVersion = "subscriptionStatusUrlVersion"
                    case subscriptionStatusUrlForSandbox = "subscriptionStatusUrlForSandbox"
                    case subscriptionStatusUrlVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                    case contentRightsDeclaration = "contentRightsDeclaration"
                    case streamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
                    case accessibilityDeclarations = "accessibilityDeclarations"
                    case appEncryptionDeclarations = "appEncryptionDeclarations"
                    case ciProduct = "ciProduct"
                    case betaTesters = "betaTesters"
                    case betaGroups = "betaGroups"
                    case appStoreVersions = "appStoreVersions"
                    case preReleaseVersions = "preReleaseVersions"
                    case betaAppLocalizations = "betaAppLocalizations"
                    case builds = "builds"
                    case betaLicenseAgreement = "betaLicenseAgreement"
                    case betaAppReviewDetail = "betaAppReviewDetail"
                    case appInfos = "appInfos"
                    case appClips = "appClips"
                    case appPricePoints = "appPricePoints"
                    case endUserLicenseAgreement = "endUserLicenseAgreement"
                    case appPriceSchedule = "appPriceSchedule"
                    case appAvailabilityV2 = "appAvailabilityV2"
                    case inAppPurchases = "inAppPurchases"
                    case subscriptionGroups = "subscriptionGroups"
                    case gameCenterEnabledVersions = "gameCenterEnabledVersions"
                    case perfPowerMetrics = "perfPowerMetrics"
                    case appCustomProductPages = "appCustomProductPages"
                    case inAppPurchasesV2 = "inAppPurchasesV2"
                    case promotedPurchases = "promotedPurchases"
                    case appEvents = "appEvents"
                    case reviewSubmissions = "reviewSubmissions"
                    case subscriptionGracePeriod = "subscriptionGracePeriod"
                    case customerReviews = "customerReviews"
                    case customerReviewSummarizations = "customerReviewSummarizations"
                    case gameCenterDetail = "gameCenterDetail"
                    case appStoreVersionExperimentsV2 = "appStoreVersionExperimentsV2"
                    case alternativeDistributionKey = "alternativeDistributionKey"
                    case analyticsReportRequests = "analyticsReportRequests"
                    case marketplaceSearchDetail = "marketplaceSearchDetail"
                    case backgroundAssets = "backgroundAssets"
                    case betaFeedbackScreenshotSubmissions = "betaFeedbackScreenshotSubmissions"
                    case betaFeedbackCrashSubmissions = "betaFeedbackCrashSubmissions"
                    case webhooks = "webhooks"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query/fields[apps]`.
                public typealias Fields_lbrack_apps_rbrack_Payload = [Operations.BundleIdsAppGetToOneRelated.Input.Query.FieldsLbrackAppsRbrackPayloadPayload]
                /// the fields to include for returned resources of type apps
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/query/fields[apps]`.
                public var fields_lbrack_apps_rbrack_: Operations.BundleIdsAppGetToOneRelated.Input.Query.Fields_lbrack_apps_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_apps_rbrack_: the fields to include for returned resources of type apps
                public init(fields_lbrack_apps_rbrack_: Operations.BundleIdsAppGetToOneRelated.Input.Query.Fields_lbrack_apps_rbrack_Payload? = nil) {
                    self.fields_lbrack_apps_rbrack_ = fields_lbrack_apps_rbrack_
                }
            }
            public var query: Operations.BundleIdsAppGetToOneRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsAppGetToOneRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsAppGetToOneRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsAppGetToOneRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.BundleIdsAppGetToOneRelated.Input.Path,
                query: Operations.BundleIdsAppGetToOneRelated.Input.Query = .init(),
                headers: Operations.BundleIdsAppGetToOneRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single App with get
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsAppGetToOneRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsAppGetToOneRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsAppGetToOneRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsAppGetToOneRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsAppGetToOneRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsAppGetToOneRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsAppGetToOneRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsAppGetToOneRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsAppGetToOneRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsAppGetToOneRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/app/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsAppGetToOneRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsAppGetToOneRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/app/get(bundleIds_app_getToOneRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsAppGetToOneRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsAppGetToOneRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)`.
    public enum BundleIdsBundleIdCapabilitiesGetToManyRelationship {
        public static let id: Swift.String = "bundleIds_bundleIdCapabilities_getToManyRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/query`.
            public struct Query: Sendable, Hashable {
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: maximum resources per page
                public init(limit: Swift.Int? = nil) {
                    self.limit = limit
                }
            }
            public var query: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Path,
                query: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Query = .init(),
                headers: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdBundleIdCapabilitiesLinkagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of related linkages
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/bundleIdCapabilities/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/bundleIdCapabilities`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)`.
    public enum BundleIdsBundleIdCapabilitiesGetToManyRelated {
        public static let id: Swift.String = "bundleIds_bundleIdCapabilities_getToManyRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/Fields_lbrack_bundleIdCapabilities_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdCapabilitiesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case capabilityType = "capabilityType"
                    case settings = "settings"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/fields[bundleIdCapabilities]`.
                public typealias Fields_lbrack_bundleIdCapabilities_rbrack_Payload = [Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Query.FieldsLbrackBundleIdCapabilitiesRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIdCapabilities
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/fields[bundleIdCapabilities]`.
                public var fields_lbrack_bundleIdCapabilities_rbrack_: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Query.Fields_lbrack_bundleIdCapabilities_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_bundleIdCapabilities_rbrack_: the fields to include for returned resources of type bundleIdCapabilities
                ///   - limit: maximum resources per page
                public init(
                    fields_lbrack_bundleIdCapabilities_rbrack_: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Query.Fields_lbrack_bundleIdCapabilities_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_bundleIdCapabilities_rbrack_ = fields_lbrack_bundleIdCapabilities_rbrack_
                    self.limit = limit
                }
            }
            public var query: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Path,
                query: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Query = .init(),
                headers: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdCapabilitiesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdCapabilitiesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of BundleIdCapabilities with get
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/bundleIdCapabilities/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/bundleIdCapabilities/get(bundleIds_bundleIdCapabilities_getToManyRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsBundleIdCapabilitiesGetToManyRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/relationships/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)`.
    public enum BundleIdsProfilesGetToManyRelationship {
        public static let id: Swift.String = "bundleIds_profiles_getToManyRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsProfilesGetToManyRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/query`.
            public struct Query: Sendable, Hashable {
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: maximum resources per page
                public init(limit: Swift.Int? = nil) {
                    self.limit = limit
                }
            }
            public var query: Operations.BundleIdsProfilesGetToManyRelationship.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsProfilesGetToManyRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsProfilesGetToManyRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsProfilesGetToManyRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.BundleIdsProfilesGetToManyRelationship.Input.Path,
                query: Operations.BundleIdsProfilesGetToManyRelationship.Input.Query = .init(),
                headers: Operations.BundleIdsProfilesGetToManyRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdProfilesLinkagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdProfilesLinkagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of related linkages
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsProfilesGetToManyRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsProfilesGetToManyRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsProfilesGetToManyRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsProfilesGetToManyRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsProfilesGetToManyRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsProfilesGetToManyRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsProfilesGetToManyRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsProfilesGetToManyRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsProfilesGetToManyRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsProfilesGetToManyRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/relationships/profiles/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/relationships/profiles/get(bundleIds_profiles_getToManyRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsProfilesGetToManyRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsProfilesGetToManyRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/bundleIds/{id}/profiles`.
    /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)`.
    public enum BundleIdsProfilesGetToManyRelated {
        public static let id: Swift.String = "bundleIds_profiles_getToManyRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.BundleIdsProfilesGetToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/Fields_lbrack_profiles_rbrack_Payload`.
                @frozen public enum FieldsLbrackProfilesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case profileType = "profileType"
                    case profileState = "profileState"
                    case profileContent = "profileContent"
                    case uuid = "uuid"
                    case createdDate = "createdDate"
                    case expirationDate = "expirationDate"
                    case bundleId = "bundleId"
                    case devices = "devices"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/fields[profiles]`.
                public typealias Fields_lbrack_profiles_rbrack_Payload = [Operations.BundleIdsProfilesGetToManyRelated.Input.Query.FieldsLbrackProfilesRbrackPayloadPayload]
                /// the fields to include for returned resources of type profiles
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/fields[profiles]`.
                public var fields_lbrack_profiles_rbrack_: Operations.BundleIdsProfilesGetToManyRelated.Input.Query.Fields_lbrack_profiles_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_profiles_rbrack_: the fields to include for returned resources of type profiles
                ///   - limit: maximum resources per page
                public init(
                    fields_lbrack_profiles_rbrack_: Operations.BundleIdsProfilesGetToManyRelated.Input.Query.Fields_lbrack_profiles_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_profiles_rbrack_ = fields_lbrack_profiles_rbrack_
                    self.limit = limit
                }
            }
            public var query: Operations.BundleIdsProfilesGetToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsProfilesGetToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BundleIdsProfilesGetToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BundleIdsProfilesGetToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.BundleIdsProfilesGetToManyRelated.Input.Path,
                query: Operations.BundleIdsProfilesGetToManyRelated.Input.Query = .init(),
                headers: Operations.BundleIdsProfilesGetToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfilesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfilesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Profiles with get
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BundleIdsProfilesGetToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BundleIdsProfilesGetToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.BundleIdsProfilesGetToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.BundleIdsProfilesGetToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.BundleIdsProfilesGetToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.BundleIdsProfilesGetToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.BundleIdsProfilesGetToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.BundleIdsProfilesGetToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.BundleIdsProfilesGetToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.BundleIdsProfilesGetToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/bundleIds/{id}/profiles/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BundleIdsProfilesGetToManyRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BundleIdsProfilesGetToManyRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/bundleIds/{id}/profiles/get(bundleIds_profiles_getToManyRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.BundleIdsProfilesGetToManyRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.BundleIdsProfilesGetToManyRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}/relationships/passTypeId`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)`.
    public enum CertificatesPassTypeIdGetToOneRelationship {
        public static let id: Swift.String = "certificates_passTypeId_getToOneRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.CertificatesPassTypeIdGetToOneRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesPassTypeIdGetToOneRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesPassTypeIdGetToOneRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesPassTypeIdGetToOneRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CertificatesPassTypeIdGetToOneRelationship.Input.Path,
                headers: Operations.CertificatesPassTypeIdGetToOneRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificatePassTypeIdLinkageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CertificatePassTypeIdLinkageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Related linkage
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesPassTypeIdGetToOneRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CertificatesPassTypeIdGetToOneRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/relationships/passTypeId/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/relationships/passTypeId/get(certificates_passTypeId_getToOneRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesPassTypeIdGetToOneRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesPassTypeIdGetToOneRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/certificates/{id}/passTypeId`.
    /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)`.
    public enum CertificatesPassTypeIdGetToOneRelated {
        public static let id: Swift.String = "certificates_passTypeId_getToOneRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/Fields_lbrack_passTypeIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackPassTypeIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case identifier = "identifier"
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/fields[passTypeIds]`.
                public typealias Fields_lbrack_passTypeIds_rbrack_Payload = [Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.FieldsLbrackPassTypeIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type passTypeIds
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/fields[passTypeIds]`.
                public var fields_lbrack_passTypeIds_rbrack_: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.Fields_lbrack_passTypeIds_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/Fields_lbrack_certificates_rbrack_Payload`.
                @frozen public enum FieldsLbrackCertificatesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                    case activated = "activated"
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/fields[certificates]`.
                public typealias Fields_lbrack_certificates_rbrack_Payload = [Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.FieldsLbrackCertificatesRbrackPayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/fields[certificates]`.
                public var fields_lbrack_certificates_rbrack_: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.Fields_lbrack_certificates_rbrack_Payload?
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/IncludePayload`.
                @frozen public enum IncludePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case certificates = "certificates"
                }
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/include`.
                public typealias IncludePayload = [Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.IncludePayloadPayload]
                /// comma-separated list of relationships to include
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/include`.
                public var include: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.IncludePayload?
                /// maximum number of related certificates returned (when they are included)
                ///
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/query/limit[certificates]`.
                public var limit_lbrack_certificates_rbrack_: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_passTypeIds_rbrack_: the fields to include for returned resources of type passTypeIds
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - include: comma-separated list of relationships to include
                ///   - limit_lbrack_certificates_rbrack_: maximum number of related certificates returned (when they are included)
                public init(
                    fields_lbrack_passTypeIds_rbrack_: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.Fields_lbrack_passTypeIds_rbrack_Payload? = nil,
                    fields_lbrack_certificates_rbrack_: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.Fields_lbrack_certificates_rbrack_Payload? = nil,
                    include: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query.IncludePayload? = nil,
                    limit_lbrack_certificates_rbrack_: Swift.Int? = nil
                ) {
                    self.fields_lbrack_passTypeIds_rbrack_ = fields_lbrack_passTypeIds_rbrack_
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.include = include
                    self.limit_lbrack_certificates_rbrack_ = limit_lbrack_certificates_rbrack_
                }
            }
            public var query: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesPassTypeIdGetToOneRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CertificatesPassTypeIdGetToOneRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Path,
                query: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Query = .init(),
                headers: Operations.CertificatesPassTypeIdGetToOneRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PassTypeIdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PassTypeIdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single PassTypeId
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CertificatesPassTypeIdGetToOneRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CertificatesPassTypeIdGetToOneRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CertificatesPassTypeIdGetToOneRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CertificatesPassTypeIdGetToOneRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.CertificatesPassTypeIdGetToOneRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.CertificatesPassTypeIdGetToOneRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CertificatesPassTypeIdGetToOneRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.CertificatesPassTypeIdGetToOneRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/certificates/{id}/passTypeId/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CertificatesPassTypeIdGetToOneRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/certificates/{id}/passTypeId/get(certificates_passTypeId_getToOneRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.CertificatesPassTypeIdGetToOneRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.CertificatesPassTypeIdGetToOneRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)`.
    public enum ProfilesBundleIdGetToOneRelationship {
        public static let id: Swift.String = "profiles_bundleId_getToOneRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesBundleIdGetToOneRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesBundleIdGetToOneRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesBundleIdGetToOneRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesBundleIdGetToOneRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.ProfilesBundleIdGetToOneRelationship.Input.Path,
                headers: Operations.ProfilesBundleIdGetToOneRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfileBundleIdLinkageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfileBundleIdLinkageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Related linkage
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesBundleIdGetToOneRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesBundleIdGetToOneRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesBundleIdGetToOneRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesBundleIdGetToOneRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesBundleIdGetToOneRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesBundleIdGetToOneRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesBundleIdGetToOneRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesBundleIdGetToOneRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesBundleIdGetToOneRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesBundleIdGetToOneRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/bundleId/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/bundleId/get(profiles_bundleId_getToOneRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesBundleIdGetToOneRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesBundleIdGetToOneRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/bundleId`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)`.
    public enum ProfilesBundleIdGetToOneRelated {
        public static let id: Swift.String = "profiles_bundleId_getToOneRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesBundleIdGetToOneRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query/Fields_lbrack_bundleIds_rbrack_Payload`.
                @frozen public enum FieldsLbrackBundleIdsRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case identifier = "identifier"
                    case seedId = "seedId"
                    case profiles = "profiles"
                    case bundleIdCapabilities = "bundleIdCapabilities"
                    case app = "app"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query/fields[bundleIds]`.
                public typealias Fields_lbrack_bundleIds_rbrack_Payload = [Operations.ProfilesBundleIdGetToOneRelated.Input.Query.FieldsLbrackBundleIdsRbrackPayloadPayload]
                /// the fields to include for returned resources of type bundleIds
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/query/fields[bundleIds]`.
                public var fields_lbrack_bundleIds_rbrack_: Operations.ProfilesBundleIdGetToOneRelated.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_bundleIds_rbrack_: the fields to include for returned resources of type bundleIds
                public init(fields_lbrack_bundleIds_rbrack_: Operations.ProfilesBundleIdGetToOneRelated.Input.Query.Fields_lbrack_bundleIds_rbrack_Payload? = nil) {
                    self.fields_lbrack_bundleIds_rbrack_ = fields_lbrack_bundleIds_rbrack_
                }
            }
            public var query: Operations.ProfilesBundleIdGetToOneRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesBundleIdGetToOneRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesBundleIdGetToOneRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesBundleIdGetToOneRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ProfilesBundleIdGetToOneRelated.Input.Path,
                query: Operations.ProfilesBundleIdGetToOneRelated.Input.Query = .init(),
                headers: Operations.ProfilesBundleIdGetToOneRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BundleIdWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BundleIdWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Single BundleId with get
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesBundleIdGetToOneRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesBundleIdGetToOneRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesBundleIdGetToOneRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesBundleIdGetToOneRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesBundleIdGetToOneRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesBundleIdGetToOneRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesBundleIdGetToOneRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesBundleIdGetToOneRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesBundleIdGetToOneRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesBundleIdGetToOneRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/bundleId/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesBundleIdGetToOneRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesBundleIdGetToOneRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/bundleId/get(profiles_bundleId_getToOneRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesBundleIdGetToOneRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesBundleIdGetToOneRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)`.
    public enum ProfilesCertificatesGetToManyRelationship {
        public static let id: Swift.String = "profiles_certificates_getToManyRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesCertificatesGetToManyRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/query`.
            public struct Query: Sendable, Hashable {
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: maximum resources per page
                public init(limit: Swift.Int? = nil) {
                    self.limit = limit
                }
            }
            public var query: Operations.ProfilesCertificatesGetToManyRelationship.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesCertificatesGetToManyRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesCertificatesGetToManyRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesCertificatesGetToManyRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ProfilesCertificatesGetToManyRelationship.Input.Path,
                query: Operations.ProfilesCertificatesGetToManyRelationship.Input.Query = .init(),
                headers: Operations.ProfilesCertificatesGetToManyRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfileCertificatesLinkagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfileCertificatesLinkagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of related linkages
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesCertificatesGetToManyRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesCertificatesGetToManyRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesCertificatesGetToManyRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesCertificatesGetToManyRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesCertificatesGetToManyRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesCertificatesGetToManyRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesCertificatesGetToManyRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesCertificatesGetToManyRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesCertificatesGetToManyRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesCertificatesGetToManyRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/certificates/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/certificates/get(profiles_certificates_getToManyRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesCertificatesGetToManyRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesCertificatesGetToManyRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/certificates`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)`.
    public enum ProfilesCertificatesGetToManyRelated {
        public static let id: Swift.String = "profiles_certificates_getToManyRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesCertificatesGetToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/Fields_lbrack_certificates_rbrack_Payload`.
                @frozen public enum FieldsLbrackCertificatesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case certificateType = "certificateType"
                    case displayName = "displayName"
                    case serialNumber = "serialNumber"
                    case platform = "platform"
                    case expirationDate = "expirationDate"
                    case certificateContent = "certificateContent"
                    case activated = "activated"
                    case passTypeId = "passTypeId"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/fields[certificates]`.
                public typealias Fields_lbrack_certificates_rbrack_Payload = [Operations.ProfilesCertificatesGetToManyRelated.Input.Query.FieldsLbrackCertificatesRbrackPayloadPayload]
                /// the fields to include for returned resources of type certificates
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/fields[certificates]`.
                public var fields_lbrack_certificates_rbrack_: Operations.ProfilesCertificatesGetToManyRelated.Input.Query.Fields_lbrack_certificates_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_certificates_rbrack_: the fields to include for returned resources of type certificates
                ///   - limit: maximum resources per page
                public init(
                    fields_lbrack_certificates_rbrack_: Operations.ProfilesCertificatesGetToManyRelated.Input.Query.Fields_lbrack_certificates_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_certificates_rbrack_ = fields_lbrack_certificates_rbrack_
                    self.limit = limit
                }
            }
            public var query: Operations.ProfilesCertificatesGetToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesCertificatesGetToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesCertificatesGetToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesCertificatesGetToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ProfilesCertificatesGetToManyRelated.Input.Path,
                query: Operations.ProfilesCertificatesGetToManyRelated.Input.Query = .init(),
                headers: Operations.ProfilesCertificatesGetToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CertificatesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CertificatesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Certificates with get
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesCertificatesGetToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesCertificatesGetToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesCertificatesGetToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesCertificatesGetToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesCertificatesGetToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesCertificatesGetToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesCertificatesGetToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesCertificatesGetToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesCertificatesGetToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesCertificatesGetToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/certificates/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesCertificatesGetToManyRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesCertificatesGetToManyRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/certificates/get(profiles_certificates_getToManyRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesCertificatesGetToManyRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesCertificatesGetToManyRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/relationships/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)`.
    public enum ProfilesDevicesGetToManyRelationship {
        public static let id: Swift.String = "profiles_devices_getToManyRelationship"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesDevicesGetToManyRelationship.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/query`.
            public struct Query: Sendable, Hashable {
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: maximum resources per page
                public init(limit: Swift.Int? = nil) {
                    self.limit = limit
                }
            }
            public var query: Operations.ProfilesDevicesGetToManyRelationship.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesDevicesGetToManyRelationship.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesDevicesGetToManyRelationship.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesDevicesGetToManyRelationship.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ProfilesDevicesGetToManyRelationship.Input.Path,
                query: Operations.ProfilesDevicesGetToManyRelationship.Input.Query = .init(),
                headers: Operations.ProfilesDevicesGetToManyRelationship.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProfileDevicesLinkagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProfileDevicesLinkagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelationship.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelationship.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of related linkages
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesDevicesGetToManyRelationship.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesDevicesGetToManyRelationship.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelationship.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelationship.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesDevicesGetToManyRelationship.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesDevicesGetToManyRelationship.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelationship.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelationship.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesDevicesGetToManyRelationship.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesDevicesGetToManyRelationship.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelationship.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelationship.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesDevicesGetToManyRelationship.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesDevicesGetToManyRelationship.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelationship.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelationship.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesDevicesGetToManyRelationship.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesDevicesGetToManyRelationship.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/relationships/devices/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelationship.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelationship.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/relationships/devices/get(profiles_devices_getToManyRelationship)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesDevicesGetToManyRelationship.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesDevicesGetToManyRelationship.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /v1/profiles/{id}/devices`.
    /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)`.
    public enum ProfilesDevicesGetToManyRelated {
        public static let id: Swift.String = "profiles_devices_getToManyRelated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/path`.
            public struct Path: Sendable, Hashable {
                /// the id of the requested resource
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: the id of the requested resource
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.ProfilesDevicesGetToManyRelated.Input.Path
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/Fields_lbrack_devices_rbrack_Payload`.
                @frozen public enum FieldsLbrackDevicesRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case platform = "platform"
                    case udid = "udid"
                    case deviceClass = "deviceClass"
                    case status = "status"
                    case model = "model"
                    case addedDate = "addedDate"
                }
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/fields[devices]`.
                public typealias Fields_lbrack_devices_rbrack_Payload = [Operations.ProfilesDevicesGetToManyRelated.Input.Query.FieldsLbrackDevicesRbrackPayloadPayload]
                /// the fields to include for returned resources of type devices
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/fields[devices]`.
                public var fields_lbrack_devices_rbrack_: Operations.ProfilesDevicesGetToManyRelated.Input.Query.Fields_lbrack_devices_rbrack_Payload?
                /// maximum resources per page
                ///
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fields_lbrack_devices_rbrack_: the fields to include for returned resources of type devices
                ///   - limit: maximum resources per page
                public init(
                    fields_lbrack_devices_rbrack_: Operations.ProfilesDevicesGetToManyRelated.Input.Query.Fields_lbrack_devices_rbrack_Payload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.fields_lbrack_devices_rbrack_ = fields_lbrack_devices_rbrack_
                    self.limit = limit
                }
            }
            public var query: Operations.ProfilesDevicesGetToManyRelated.Input.Query
            /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesDevicesGetToManyRelated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProfilesDevicesGetToManyRelated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ProfilesDevicesGetToManyRelated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ProfilesDevicesGetToManyRelated.Input.Path,
                query: Operations.ProfilesDevicesGetToManyRelated.Input.Query = .init(),
                headers: Operations.ProfilesDevicesGetToManyRelated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DevicesWithoutIncludesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DevicesWithoutIncludesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Devices with get
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProfilesDevicesGetToManyRelated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ProfilesDevicesGetToManyRelated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelated.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelated.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Parameter error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ProfilesDevicesGetToManyRelated.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ProfilesDevicesGetToManyRelated.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelated.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelated.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Unauthorized error(s)
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ProfilesDevicesGetToManyRelated.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.ProfilesDevicesGetToManyRelated.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelated.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelated.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProfilesDevicesGetToManyRelated.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.ProfilesDevicesGetToManyRelated.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ProfilesDevicesGetToManyRelated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.ProfilesDevicesGetToManyRelated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/profiles/{id}/devices/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ProfilesDevicesGetToManyRelated.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ProfilesDevicesGetToManyRelated.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit exceeded error
            ///
            /// - Remark: Generated from `#/paths//v1/profiles/{id}/devices/get(profiles_devices_getToManyRelated)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.ProfilesDevicesGetToManyRelated.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.ProfilesDevicesGetToManyRelated.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
